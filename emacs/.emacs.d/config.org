#+PROPERTY: header-args    :results silent
* use-package
   :PROPERTIES:
   :created:  2020-01-29 11:36:05 CST
   :END:
I use =use-package=. This configuration needs to be at the top. 

When I open emacs on a new machine, my packages should be automatically
downloaded. This is the recommended method.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

[2020-02-24 Mon] Trying to get set up on SLS computers again. There's a
problem---some packages don't support old emacs versions. I'm debating
whether it makes sense to always ensure.
* org
Related to =org-mode=. It's amazing how this has taken over my life. 

First, add the modules we use. 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)
#+END_SRC

Now, load it. There's no point to delay. 
#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

Define the prefix key and bind it. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw-org-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c o") 'jmw-org-prefix)
#+END_SRC
** sched
My scheduling subsystem. As of [2020-01-08 Wed], described in
=~/core/mind/sys/meta=. 
*** agenda
   :PROPERTIES:
   :created:  2020-01-08 20:17:40 CST
   :END:
Related to the agenda, for instance:
- what displays
- how it displays
- how it is invoked

The main key sequence is
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

Specifying which days appear in the agenda:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 10)
  (setq org-agenda-start-day "-4d")
#+END_SRC

Turn a heading into a habit. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-make-habit ()
    "Turn the following heading into a habit. Schedules it for
  today with .+1d/2d repeater interval."
    (interactive)
    (let ((time (concat
		 "<"
		 (format-time-string "%F") ;; yyyy-mm-dd
		 " .+1d/2d")))
      (org-set-property "STYLE" "habit")
      (org-schedule '(1) time)))
  (define-key 'jmw-org-prefix "h" 'jmw-org-make-habit)
#+END_SRC

Set todo keywords.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCEL(c)")))
#+END_SRC

Better colors for TODO keywords. 
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	'(("CANCEL" . (:foreground "red" :weight bold))
	  ("WAIT" . (:foreground "yellow" :weight bold))))
#+END_SRC

Don't change window configuration when viewing the agenda. According to
[[https://stackoverflow.com/q/21195327/4019495][SO]], there is no easy solution. The offender is =delete-other-windows= in
function =org-capture-place-template=. We adopt the solution given in
another [[https://stackoverflow.com/a/54251825/4019495][SO]] post.
#+BEGIN_SRC emacs-lisp
  (defun jmw-ad-org-agenda-place-template (oldfun args)
    (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
      (apply oldfun args)))      
  (advice-add 'org-agenda
	      :around 'jmw-ad-org-capture-place-template)
  (setq org-agenda-window-setup 'other-window)
#+END_SRC

Other:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'other-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-files '("~/core/mind/sys/short/proc/main.org"))
  (setq org-habit-show-habits-only-for-today nil)
#+END_SRC
*** org-clock
   :PROPERTIES:
   :created:  2020-01-08 20:31:18 CST
   :END:
The =org-clock= feature. 

First, load. The functions are autoloaded, but I load it now to add
=org-clock-out-if-current=.
#+BEGIN_SRC emacs-lisp
  (require 'org-clock) 
#+END_SRC

I want =org-clock-history= to be long. 
#+BEGIN_SRC emacs-lisp
  (setq org-clock-history-length 35)
#+END_SRC

On the mode line, I want to see how much time I've spent today on the
task. The default is showing the amount of time spend since the
beginning of time, which is weird. 
#+BEGIN_SRC emacs-lisp
  (setq org-clock-mode-line-total 'today)
#+END_SRC

=org-clock-goto= should display some context above. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-clock-goto-hook (lambda () (recenter-top-bottom 18)))
#+END_SRC

What follows are many commands related to task manipulation. I use
=org-clock-history= as a task stack.

=org-clock-goto= from anywhere, i.e jump to current clocking task in the
schedule.
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-clock-goto ()
    (interactive)
    (select-window (jmw-main-sched-window))
    (org-clock-goto))
  (define-key 'jmw-org-prefix "g" 'jmw-org-clock-goto)
#+END_SRC

Push a task onto the stack. Semantically, this is saying: the following
is relevant to completing the current task. Usually for tasks I discover
in the moment rather than ones I know at the outset.
#+BEGIN_SRC emacs-lisp
  (defun jmw-push-task (task-name)
    "Push a task onto the stack."
    (interactive "sTask name: ")
    (jmw-org-clock-goto)
    (org-insert-todo-heading-respect-content)
    (org-do-demote)
    (move-end-of-line 1)
    (insert task-name)
    (org-clock-in))
  (define-key 'jmw-org-prefix "p" 'jmw-push-task)
#+END_SRC
As of [2020-01-10 Fri], there is no symmetric notion for queueing a
task. Queueing a task can be done using ordinary insertion of a TODO
item. There is no notion of deferring a task (a la Go's =defer=) because
it can be done using ordinary TODO insertion.

Popping a task off the stack. Not called =jmw-pop-task= because calling
it doesn't mean the task is done.
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-clock-out-up ()
    "Clock out and go up a process in the stack."
    (interactive)
    (when (org-clocking-p)
      (let ((org-log-note-clock-out nil)
	    (org-clock-out-switch-to-state nil))
	(org-clock-out)))
    (pop org-clock-history)
    (let* ((marker (pop org-clock-history))
	   (buf (marker-buffer marker)))
      (select-window (jmw-main-sched-window))
      (goto-char marker)
      (org-clock-in)))
  (define-key 'jmw-org-prefix "o" 'jmw-org-clock-out-up)
#+END_SRC

If we're clocking and point is on the current task, =org-todo= should
run =jmw-org-clock-out-up=. This isn't very clean, but I couldn't come
up with anything better.
#+BEGIN_SRC emacs-lisp 
  ;; code copied from ~org-clock-out-if-current~
  (defun jmw-org-clock-out-if-current ()
    (when (and (org-clocking-p)
	       org-clock-out-when-done
	       (marker-buffer org-clock-marker)
	       (or (and (eq t org-clock-out-when-done)
			(member org-state org-done-keywords))
		   (and (listp org-clock-out-when-done)
			(member org-state org-clock-out-when-done)))
	       (equal (or (buffer-base-buffer (org-clocking-buffer))
			  (org-clocking-buffer))
		      (or (buffer-base-buffer (current-buffer))
			  (current-buffer)))
	       (< (point) org-clock-marker)
	       (> (save-excursion (outline-next-heading) (point))
		  org-clock-marker))
      (org-auto-repeat-maybe org-state)
      (jmw-org-clock-out-up)))
  (add-hook 'org-after-todo-state-change-hook
	    'jmw-org-clock-out-if-current)
  (remove-hook 'org-after-todo-state-change-hook
	       'org-clock-out-if-current)
#+END_SRC

Popping a task off the stack. This time, we're actually done the task.
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-done ()
    (interactive)
    (jmw-org-clock-goto)
    (org-todo "DONE") ;; calls `jmw-org-clock-out-up`
    (org-clock-goto))
  (define-key 'jmw-org-prefix "d" 'jmw-org-done)
#+END_SRC
In theory, the call to =jmw-org-clock-out-up= should bring us to the
parent task, so the call to =org-clock-goto= would be
redundant. However, =org-todo= is wrapper in a big =save-excursion= so
it's still necessary.

Similarly, pop a task off the stack because we've decided not to do it.
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-cancel ()
    (interactive)
    (jmw-org-clock-goto)
    (org-todo "CANCEL")
    (org-clock-goto))
  (define-key 'jmw-org-prefix "c" 'jmw-org-cancel)
#+END_SRC
*** other
   :PROPERTIES:
   :created:  2020-01-08 20:33:25 CST
   :END:
The window containing =main.org=. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-main-sched-window ()
    (get-buffer-window "main.org" t))
#+END_SRC
** org-babel
   :PROPERTIES:
   :created:  2020-01-08 20:39:50 CST
   :END:
Org's system for dealing with source code. 

Load it for go, because it isn't one of Org's default languages. 
#+BEGIN_SRC emacs-lisp
  (use-package ob-go)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html][Org docs]] say to do this for js. 
#+BEGIN_SRC emacs-lisp
  (require 'ob-js)
#+END_SRC

Load the org-babel languages I use. Necessary to get ~C-c C-c~ to
actually execute something.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (C . t)
     (shell . t)
     (go . t)
     (js . t)))
#+END_SRC

This is romantically named the "Library of Babel". As of
[2020-03-20 Fri], I've never used it.
#+BEGIN_SRC emacs-lisp
  (org-babel-lob-ingest "~/.emacs.d/library-of-babel.org")
#+END_SRC

Don't prompt for confirmation when executing code blocks. 
#+BEGIN_SRC emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

By default, editing org source reorganizes the frame. I want the new
buffer to appear in the original window. 
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'other-window)
#+END_SRC
** heading+list
   :PROPERTIES:
   :created:  2020-03-20 18:12:39 EDT
   :END:
Related to headings and lists. 

Expand lists like they were subheadings. 
#+BEGIN_SRC emacs-lisp
  (setq org-cycle-include-plain-lists 'integrate)
#+END_SRC

Don't insert random blank lines around entries. Don't split lines. 
#+BEGIN_SRC emacs-lisp
  (setq org-blank-before-new-entry 
	'((heading . nil)
	  (plain-list-item . nil))) 
  (setq org-M-RET-may-split-line
	'((headline . nil)
	  (item . nil)))
#+END_SRC

Insert creation time as a property when creating a headline. This is
useful for tasks---I may cancel something if it's been sitting around
for too long.
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-insert-creation ()
    (org-set-property "created" (format-time-string "%F %T %Z")))
  (add-hook 'org-insert-heading-hook 'jmw-org-insert-creation)
#+END_SRC

I don't want to log every time an item is repeated. 
#+BEGIN_SRC emacs-lisp
  (setq org-log-repeat nil)
#+END_SRC

Allow refiling to any headline. 
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((nil . (:maxlevel . 10))))
#+END_SRC
** capture
   :PROPERTIES:
   :created:  2020-03-20 18:18:01 EDT
   :END:
=org-capture= is useful for someone with many miscellaneous thoughts. It
allows you to easily record something wherever you are. 

This is the recommended key binding. It has to be global. 
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
#+END_SRC

=org-capture-templates= is the types of =org-capture='s you can perform.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	'(("e"
	   "Computer error"
	   entry
	   (file "~/core/mind/ob/thm/cs/soft/err-log.org")
	   "* %U %?\n %i")
	  ("i"
	   "interesting thought"
	   entry
	   (file+headline "~/core/mind/sys/short/proc/main.org"
			  "interesting thought")
	   "* %U %?\n %i")))
#+END_SRC

Don't change window configuration during an =org-capture=. According to
[[https://stackoverflow.com/q/21195327/4019495][SO]], there is no easy solution. The offender is =delete-other-windows= in
function =org-capture-place-template=. We adopt the solution given in
another [[https://stackoverflow.com/a/54251825/4019495][SO]] post.
#+BEGIN_SRC emacs-lisp
  (defun jmw-ad-org-capture-place-template (oldfun args)
    (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
      (apply oldfun args)))      
  (advice-add 'org-capture-place-template
	      :around 'jmw-ad-org-capture-place-template)
#+END_SRC
** markup
   :PROPERTIES:
   :created:  2020-03-20 18:28:51 EDT
   :END:
Textual markup. 

Allow for *this sentence to actually be formatted bold in org, even with
a newline in the middle*. Following [[https://emacs.stackexchange.com/a/13828/21253][stackexchange]].
#+BEGIN_SRC emacs-lisp
  (setf (car (nthcdr 4 org-emphasis-regexp-components)) 50)
  (org-set-emph-re 'org-emphasis-regexp-components
		   org-emphasis-regexp-components)
#+END_SRC

Customizing the org emphasis characters (like the asterisk for turning
text bold). According to [[https://www.mail-archive.com/emacs-orgmode@gnu.org/msg115307.html][this]] message, adding different characters is
not going to happen.
#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist
	'(("*" (bold :foreground "Yellow")) ;; like highlighting
	  ("/" italic)
	  ("_" underline)
	  ("=" org-verbatim verbatim)
	  ("~" org-code verbatim)
	  ("+" (:strike-through t))))
#+END_SRC

Adds a comment. Mainly for annotating books (see
=russell-happy.org=). The implementation may change with aesthetic
preferences. The "a" prefix is for "annotation".
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-comment ()
    (interactive)
    (insert "*")
    (org-time-stamp-inactive '(16))
    (insert " JMW:* "))
  (define-key 'jmw-org-prefix "ac" 'jmw-org-comment)
#+END_SRC

Highlight an active region. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-highlight-region (from to)
    (interactive "r")
    (when (use-region-p)
      (save-excursion
	(goto-char to)
	(insert "*")
	(goto-char from)
	(insert "*"))
      (deactivate-mark)
      (fill-paragraph)))
  (define-key 'jmw-org-prefix "ah" 'jmw-org-highlight-region)
#+END_SRC

This stores the current location of point for pasting into an org
file. This is critical for org's hypertext capabilities.
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link) 
#+END_SRC
** other
When displayed, I like lines to wrap around rather than disappear off
the edge. It makes tables look terrible, but whatever.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC

Special characters. This'll display them in the buffer and correctly
export to HTML. As of [2020-03-20 Fri], most of these were created to
take notes for 18.675. 
#+BEGIN_SRC emacs-lisp
  (setq org-entities-user ; special symbols
	'(("scrB" "\\scrB" t "&#x212C;" "B" "B" "ℬ") ; "script B"
	  ("scrS" "\\scrS" t "&#x1D4AE;" "S" "S" "𝒮") 
	  ("scrF" "\\scrF" t "&#x2131;" "F" "F" "ℱ") 
	  ("RR" "\\RR" t "&#x211D;" "R" "R" "ℝ") 
	  ("ZZ" "\\ZZ" t "&#x2124;" "Z" "Z" "ℤ") 
	  ("CC" "\\CC" t "&#x2102;" "C" "C" "ℂ") 
	  ("PP" "\\PP" t "&#x2119;" "P" "P" "ℙ") ; prob
	  ("EE" "\\EE" t "&#x1D53C;" "E" "E" "𝔼") ; e.v.
	  ("eps" "\\eps" t "&#x03B5;" "e" "e" "ε") 
	  ("iff" "\\iff" t "&#x21D4;" "<->" "<->" "⇔") 
	  ("imp" "\\imp" t "&#x21D2;" "->" "->" "⇒") 
	  ("del" "\\del" t "&#x2202;" "d" "d" "∂") 
	  ("NN" "\\NN" t "&#x2115;" "N" "N" "ℕ") 
	  ))
#+END_SRC
* pkg
Related to an emacs package. 
** auctex
For editing source files in the TeX family. 
#+BEGIN_SRC emacs-lisp 
  (use-package tex
    :config
    (setq TeX-view-program-selection
	  (quote
	   (((output-dvi has-no-display-manager)
	     "dvi2tty")
	    ((output-dvi style-pstricks)
	     "dvips and gv")
	    (output-dvi "xdvi")
	    (output-pdf "Okular")
	    (output-html "xdg-open"))))
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq font-latex-fontify-script nil)

    :defer t
    :ensure auctex)
#+END_SRC
** elpy
For editing Python source files. 

Copied and pasted. 
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC
** buffer-move
Switches buffers between windows. This is super useful. 
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind
    (("<C-S-up>" . 'buf-move-up)
     ("<C-S-down>" . 'buf-move-down)
     ("<C-S-left>" . 'buf-move-left)
     ("<C-S-right>" . 'buf-move-right)))
#+END_SRC
** emms
EMMS is the Emacs MultiMedia System. I use it for playing music. 
#+BEGIN_SRC emacs-lisp
  (use-package emms-setup
    :config
    (emms-all)
    (emms-default-players)
    (setq emms-source-file-default-directory "~/core/mind/env/ext")
    (setq emms-repeat-playlist t)
    (emms-mode-line 0)
    (emms-playing-time 0)
    (emms-add-directory-tree (concat
			      emms-source-file-default-directory
			      "/chills"))
    (emms-shuffle)

    :ensure emms)
#+END_SRC

Define my emms prefix. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw-emms-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c e") 'jmw-emms-prefix)
#+END_SRC

Pause the music. 
#+BEGIN_SRC emacs-lisp
  (define-key 'jmw-emms-prefix (kbd "<SPC>") 'emms-pause)
#+END_SRC
** cc-mode
For editing C source files. 

Use "line comment style", i.e =//= style comments. 
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
#+END_SRC
** hexl
Emacs's built-in hex editor. 
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-h" 'hexl-find-file)
#+END_SRC
** pyim
A Chinese input method. Installed because ibus pinyin wasn't working
with fullscreen emacs.
#+BEGIN_SRC emacs-lisp
  (use-package pyim
    :config
    (require 'pyim-basedict)
    (pyim-basedict-enable)
    (setq default-input-method "pyim"))
#+END_SRC
** lorem ipsum
   :PROPERTIES:
   :created:  2020-01-29 12:20:45 CST
   :END:
Add lorem ipsum filler text to emacs. The utility of this is avoiding
writing that random one-off script (or find a suitable document) when
you need to generate text.
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum)
#+END_SRC

I don't use the default bindings because it conflicts with org-mode's
~C-c l~.
** vterm
   :PROPERTIES:
   :created:  2020-01-29 19:03:53 CST
   :END:
A terminal emulator that
- allows curses based applications
- ignores certain shortcuts like ~C-x C-f~ (passes them to emacs)
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :config
    (setq vterm-min-window-width 50))
#+END_SRC

Define my vterm prefix
#+BEGIN_SRC emacs-lisp
  (fset 'jmw-vterm-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c v") 'jmw-vterm-prefix)
#+END_SRC

Bind functions
#+BEGIN_SRC emacs-lisp
  (define-key 'jmw-vterm-prefix "b" 'vterm)
  (define-key 'jmw-vterm-prefix "o" 'vterm-other-window)
#+END_SRC

Don't prompt for killing vterm buffers. Code from [[https://stackoverflow.com/a/2708042/4019495][SO]]. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'vterm-mode-hook
	    (lambda ()
	      (set-process-query-on-exit-flag
	       (get-buffer-process (current-buffer)) nil)))	  
#+END_SRC
** go-mode
   :PROPERTIES:
   :created:  2020-02-05 08:31:27 EST
   :END:
Major mode for Go source files. 
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
	  :bind
	  (:map go-mode-map
	  ("M-." . godef-jump)
	  ("C-x 4 ." . godef-jump-other-window)
	  ("C-c C-d" . godoc-at-point))

	  :config
	  ;; (setq godoc-at-point-function 'godoc-gogetdoc)
	  )
#+END_SRC

** ivy
   :PROPERTIES:
   :created:  2020-02-16 16:41:13 EST
   :END:
A better way to select an item from a list. This includes
- ~C-x C-f~
- ~M-x~
#+BEGIN_SRC emacs-lisp
  (use-package ivy)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
#+END_SRC

These are the recommended customizations.
#+BEGIN_SRC emacs-lisp
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
#+END_SRC 

Ignore order of input tokens. This is the default of helm. 
#+BEGIN_SRC emacs-lisp
    (setq ivy-re-builders-alist
	  '((t . ivy--regex-ignore-order)))
#+END_SRC
*** counsel
   :PROPERTIES:
   :created:  2020-02-16 21:51:03 EST
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (:map global-map
		("M-x" . counsel-M-x)
		("C-x C-f" . counsel-find-file)
		("M-y" . counsel-yank-pop)
		("C-h v" . counsel-describe-variable)
		("C-h f" . counsel-describe-function)
	   :map org-mode-map
	   ("C-c C-j" . counsel-org-goto))

    :config
    (setq ivy-initial-inputs-alist '(()))
    (setq counsel-find-file-at-point t))
#+END_SRC

Push onto the org mark ring when using counsel to goto. We want the mark
ring to be large.
#+BEGIN_SRC emacs-lisp
  (defun jmw-ad-counsel-org-goto ()
    (org-mark-ring-push))
  (advice-add 'counsel-org-goto
	      :before 'jmw-ad-counsel-org-goto)
  (setq org-mark-ring-length 16)
#+END_SRC
*** ivy-rich
   :PROPERTIES:
   :created:  2020-02-18 15:31:59 EST
   :END:
Display more info in ivy. For example, make ~M-x~ display a column of
documentation alongside the list of candidate functions. 
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :config
    ;; (ivy-rich-mode 1)
    )
#+END_SRC

The reason I looked into this was for =counsel-find-file=. I wanted to
see =ls -l= like stuff. 

The first step is to define a function for the file size. 
#+BEGIN_SRC emacs-lisp
  (defun ivy-rich-file-size (candidate)
    (let ((fname (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p fname)) (file-remote-p fname))
	  ""
	(file-size-human-readable (file-attribute-size
				   (file-attributes fname))
				  "si"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (plist-put ivy-rich-display-transformers-list
	     'counsel-find-file
	     '(:columns
	      ((ivy-rich-candidate
		(:width 40))
	       ;; (ivy-rich-file-user
	       ;;  (:width 4 :face font-lock-doc-face))
	       ;; (ivy-rich-file-group
	       ;;  (:width 4 :face font-lock-doc-face))
	       ;; (ivy-rich-file-modes
		;; (:width 11 :face font-lock-doc-face))
	       (ivy-rich-file-size
		(:width 6 :face font-lock-doc-face))
	       (ivy-rich-counsel-find-file-truename
		(:face font-lock-doc-face))
	       ;; (ivy-rich-file-last-modified-time
	       ;;  (:width 30 :face font-lock-doc-face))
	       )))
  (ivy-rich-set-display-transformer)
#+END_SRC
** exwm
   :PROPERTIES:
   :created:  2020-03-01 19:11:44 EST
   :END:
The Emacs OS. 
*** main
    :PROPERTIES:
    :created:  2020-03-10 00:34:57 EDT
    :END:
[2020-03-02 Mon] I'm not sure the system tray is doing anything right
now.
#+BEGIN_SRC emacs-lisp
  ;; (ignore-errors
    (use-package exwm
      :ensure nil 
      :demand t

      :config
      (require 'exwm-systemtray)
      (exwm-systemtray-enable)
      (setq exwm-workspace-number 4)
      (setq exwm-systemtray-height 16)
      (setq exwm-input-global-keys
	    `(
	      ([?\s-r] . exwm-reset)
	      ([?\s-w] . exwm-workspace-switch)
	      ,@(mapcar (lambda (i)
			  `(,(kbd (format "s-%d" i)) .
			    (lambda ()
			      (interactive)
			      (exwm-workspace-switch-create ,i))))
			(number-sequence 0 9))
	      ([?\s-&] . (lambda (command)
			   (interactive (list (read-shell-command "$ ")))
			   (start-process-shell-command command nil command)))
	      (,(kbd "C-;") . other-window)
	      (,(kbd "C-'") . other-frame)
	      (,(kbd "s-k") . exwm-workspace-delete)
	      ))
      (setq exwm-input-simulation-keys
	'(
	  ([?\M-w] . [?\C-c])
	  ([?\C-y] . [?\C-v])
	  ))
      ;; Allow switching to buffers on other workspaces
      (setq exwm-workspace-show-all-buffers t)
      (setq exwm-layout-show-all-buffers t)

      (setq exwm-input-prefix-keys (delete ?\C-h exwm-input-prefix-keys))
      (setq exwm-input-prefix-keys (add-to-list 'exwm-input-prefix-keys ?\C-g))

      (exwm-enable)
      )  
    ;; )
#+END_SRC
*** desktop-environment
    :PROPERTIES:
    :created:  2020-03-10 00:22:02 EDT
    :END:
#+BEGIN_SRC emacs-lisp
  (use-package desktop-environment
    :ensure nil

    :config
    ;; For some reason, this has to be after exwm setup
    (setq desktop-environment-update-exwm-global-keys :global)
    (desktop-environment-mode))
#+END_SRC

By default, =desktop-environment-screenshot= saves the entire screen to
some specified directory. Redefine to take a screenshot of a region and
copy to clipboard. This took me way too long to hack. Some oddities:
- The ~sleep 0.1~ at the beginning is suggested by [[https://bbs.archlinux.org/viewtopic.php?id=86507][this old archlinux
  bbs]] thread. If it's not there, on EXWM windows it gives the error
  "Couldn't grab keyboard".
- The plethora of flags is to get =scrot(1)= to copy to clipboard. 
- The ~&>/dev/null~ needs to be there, else =scrot(1)= hangs. Why? Who
  knows.
This is the state as of [2020-03-21 Sat]. Let's hope this will one day
be better written.
#+BEGIN_SRC emacs-lisp
  (defun desktop-environment-screenshot ()
    (interactive)
    (shell-command "sleep 0.1; scrot -s '/tmp/%F_%T_$wx$h.png' -e 'xclip -selection clipboard -target image/png -i $f &>/dev/null'"))
#+END_SRC
** smart-mode-line
   :PROPERTIES:
   :created:  2020-03-16 17:17:54 EDT
   :END:
A more customizable mode line. 

Mark theme as safe. 
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes
	(quote
	 ("3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" default)))
#+END_SRC

Main loading. 
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/theme 'dark)
    ;; this is needed to not push global modeline info off screen
    (setq sml/shorten-modes t)
    (setq sml/mode-width 40)

    (sml/setup))
#+END_SRC
** mini-modeline
   :PROPERTIES:
   :created:  2020-03-17 14:38:32 EDT
   :END:
Move modeline to reside in minibuffer area. Now, only the current
window's mode line is displayed. 

The issue with the default is a lot of info is repeated---the current
time, the current clocking task, etc. Furthermore, with the way I
horizontally split windows, the info wouldn't even fit. 

This is much cleaner. 
#+BEGIN_SRC emacs-lisp
  (use-package mini-modeline
    :after smart-mode-line

    :config
    (setq mini-modeline-right-padding 0)
    (mini-modeline-mode t))
#+END_SRC
** js2-mode
   :PROPERTIES:
   :created:  2020-03-23 13:53:15 EDT
   :END:
An improved javascript major mode. 
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (setq js-indent-level 2))
#+END_SRC
* mode
Related to a mode, minor or major. 
** custom
   :PROPERTIES:
   :created:  2020-01-29 18:33:43 CST
   :END:
Custom is Emacs's user-friendly customization interface. I don't like
it, I prefer simple =setq='s. 

I don't like having Custom litter my =init.el= with stuff. This sets it
to save in a different file, which I don't load. Normally, Custom will
do nothing anyway, but occasionally I'll do something that causes it to
randomly pop back into my =init.el=. 
#+BEGIN_SRC emacs-lisp 
  (setq custom-file (concat user-emacs-directory "/custom.el"))
#+END_SRC
** display-time-mode
   :PROPERTIES:
   :created:  2020-03-17 16:01:31 EDT
   :END:
Display the current time on the modeline. Used in conjunction with
mini-modeline for my system tray. 
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t)
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** display-battery-mode
   :PROPERTIES:
   :created:  2020-03-17 16:18:23 EDT
   :END:
Display battery status on the modeline. Used in conjuction with
mini-modeline for my system tray.
#+BEGIN_SRC emacs-lisp
  (display-battery-mode 1)
#+END_SRC
** column-number-mode
   :PROPERTIES:
   :created:  2020-03-21 14:20:38 EDT
   :END:
Displays column number of point on the mode line. 
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
** size-indication-mode
   :PROPERTIES:
   :created:  2020-03-21 14:21:26 EDT
   :END:
Display size of buffer on the mode line. 
#+BEGIN_SRC emacs-lisp
  (size-indication-mode 1)
#+END_SRC
** other
#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (menu-bar-mode 0) 
    (tool-bar-mode 0) 
    (scroll-bar-mode 0)
    (winner-mode 1)
    (fringe-mode 1))
#+END_SRC
* startup
Look and feel of emacs upon after startup. 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  (set-default-font "Ubuntu Mono-12")
  (setq inhibit-startup-screen t)
#+END_SRC

Setup initial applications in EXWM. [2020-03-17 Tue] I guess I'll call
manually. For some reason, putting it in =window-setup-hook= doesn't
work.
#+BEGIN_SRC emacs-lisp
  (defun jmw/exwm-init-apps ()
    (interactive)

    (start-process-shell-command "megasync" nil "megasync")

    (exwm-workspace-switch-create 1)
    (let ((browser (getenv "BROWSER")))
      (start-process-shell-command browser nil browser))

    (sleep-for 1)

    (exwm-workspace-switch-create 2)
    (let ((pdf-viewer (getenv "PDF_VIEWER")))
      (start-process-shell-command pdf-viewer nil pdf-viewer))

    (sleep-for 1)

    (exwm-workspace-switch-create 3)
    (start-process-shell-command "anki" nil "anki")

    (sleep-for 1)
    )
#+END_SRC

These are the initial files I want open. 
#+BEGIN_SRC emacs-lisp
  (setq jmw/init-file-list
	(list
	 (getenv "EMACS_CONFIG")
	 ))
#+END_SRC

The main thing. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook
	    (lambda ()
	      (split-window-right) 
	      (split-window-right)
	      (balance-windows)
	      (dolist (fname jmw/init-file-list)
		(find-file fname))
	      (find-file (concat (getenv "PROC_DIR")
				 "/main.org"))
	      (set-window-dedicated-p (get-buffer-window "main.org")
				      t) 
	      (windmove-right)
	      (vterm)
	      (windmove-right)
	      (vterm)
	      ;; Not sure why this doesn't work
	      ;; (when (member 'exwm features)
	      ;;   ;; We're using exwm
	      ;;   (jmw/exwm-init-apps))
	      (select-window (jmw-main-sched-window))
	      ))
#+END_SRC
** theme
   :PROPERTIES:
   :created:  2020-01-28 22:45:41 CST
   :END:
[2020-01-28 Tue] I haven't given this much thought. =manoj-dark= is
fine. 

[2020-03-17 Tue] trying other stuff. Decided to stick with this. 
#+BEGIN_SRC emacs-lisp 
  (load-theme 'manoj-dark)
#+END_SRC
* other
  :LOGBOOK:
  CLOCK: [2020-01-09 Thu 16:30]--[2020-01-09 Thu 16:31] =>  0:01
  :END:
Default case. As of [2019-12-24 Tue], not too organized. 

Define =jmw-prefix=. This is the prefix key for my personal stuff. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c j") 'jmw-prefix)
#+END_SRC

By default, Emacs will create backups of files, which look like
#+BEGIN_EXAMPLE
[michael@contessa test-backup]$ ls
test.org  test.org~
#+END_EXAMPLE
hich I don't like. If I need backups, I'll use version control. 
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

Leave point at the same screen position when going a page down. I have
no idea why the default is to move point to the top of the window. 
#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position t)
#+END_SRC

Start the emacs server. This allows the command =emacsclient(1)= to open
a file in a buffer owned by an existing emacs process, which is used in
=git-commit(1)=.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Lines should not by >72 chars long. 
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 72)
#+END_SRC

Tabs should display as 2 spaces wide. 
#+BEGIN_SRC emacs-lisp
  (setq tab-width 2)
#+END_SRC

These aren't bound to anything by default. Put them to good use. 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-;") 'other-window)
  (define-key org-mode-map (kbd "C-'") nil)
  (global-set-key (kbd "C-'") 'other-frame)
#+END_SRC

Type ~y~ or ~n~ instead of yes/no. I've copied this from [[https://pages.sachachua.com/.emacs.d/Sacha.html#org2509ed6][Sacha Chua]]. One
would think there was a better way of doing this. 
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

If exists a window containing buffer, switch to it. Otherwise, switch to
buffer.
#+BEGIN_SRC emacs-lisp
  (defun switch-to-window-or-buffer (buffer)
    (let ((containing-window (get-buffer-window buffer t)))
      (if containing-window
	  (select-window containing-window)
	(switch-to-buffer buffer))))
#+END_SRC
** 7z
I use 7z as my default encryption format. This opens 7z files in the
style I want: the file will be extracted to my temporary directory when
first called, and rearchived when called again.
#+BEGIN_SRC emacs-lisp
  (defun jmw-7z (zfile file outfile)
    (if (file-exists-p outfile)
	;; If outfile exists, put it back into the zfile (the 7z archive)
	(progn
	  (message "Preparing to compress")
	  (sit-for 0.25)
	  (call-process-shell-command
	   (concat "7z a -p"
		   (read-passwd "Password? " t)
		   " "
		   zfile
		   " "
		   outfile))
	  (call-process-shell-command
	   (concat 
	    "shred -u "
	    outfile)))
      ;; Otherwise, extract it
      (progn
	(message "Preparing to extract")
	(sit-for 0.25)
	(unless (file-exists-p zfile)
	  (error (concat
		  "Archive file "
		  zfile
		  " does not exist.")))
	(while (not (eq
		     (call-process-shell-command
		      (concat "7z e -p"
			      (read-passwd "Password? ")
			      " -o"
			      (getenv "TEMP") 
			      " "
			      zfile
			      " "
			      file))
		     0))
	  (message "Incorrect Password. Try again.")
	  (sit-for 0.5))
	(find-file outfile))))

#+END_SRC

The wander archive is a kind of diary. I write in it about once a
month. It's encrypted because it contains sensitive stuff. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-wander ()
    (interactive)
    (jmw-7z (getenv "WANDER_ARCHIVE")
	    "wander.txt"
	    (concat (getenv "TEMP")
		    "/wander.txt")))
  (define-key 'jmw-prefix "w" 'jmw-wander)
#+END_SRC

The safe archive contains passwords. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-safe ()
    (interactive)
    (jmw-7z (getenv "SAFE_ARCHIVE")
	    "safe.org"
	    (concat (getenv "TEMP")
		    "/safe.org")))
  (define-key 'jmw-prefix "s" 'jmw-safe)
#+END_SRC
** timer
   :PROPERTIES:
   :created:  2020-02-01 20:12:03 CST
   :END:
I use timers in my workflow. They're usually end conditions of runs.

Define the timer prefix, and bind it. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw-timer-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c t") 'jmw-timer-prefix)
#+END_SRC

This is how you create a timer. In the future, this should be extended
to take in info about the current run. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-run-with-timer (durationspec)
    (interactive "sDuration: ")
    (setq jmw-timer
	  (run-with-timer (timer-duration durationspec)
			  0.5
			  'jmw-times-up)))
  (define-key 'jmw-timer-prefix "s" 'jmw-run-with-timer)
#+END_SRC

This is what happens when time is up. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-times-up ()
    "Single function run when timer expires"
    (play-sound-file "~/core/prod/bin/other/alarm.wav"))
#+END_SRC

The rest of these functions need serious work.
#+BEGIN_SRC emacs-lisp
  (defun jmw-find-timer (timerlist)
    (if timerlist
	(if (equal (timer--function (car timerlist))
		   'jmw-times-up)
	    (car timerlist)
	  (jmw-find-timer (cdr timerlist)))
      nil))
  (defun jmw-cancel-timer ()
    (interactive)
    (cancel-timer jmw-timer)
    (let ((timer (jmw-find-timer timer-list)))
      (if timer
	  (setq jmw-timer timer))))
  (defun jmw-time-left ()
    "Timer info. May be expanded to more than just time remaining."
    (interactive)
    (let* ((time-diff (time-subtract (timer--time jmw-timer)
				     (current-time)))
	   (floats (float-time time-diff))
	   (seconds (floor floats)))
      (message "%ss" seconds)))
  (define-key 'jmw-timer-prefix "c" 'jmw-cancel-timer)
  (define-key 'jmw-timer-prefix "d" 'jmw-time-left) ;; "display"
#+END_SRC
