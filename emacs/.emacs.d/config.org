* org
Related to =org-mode=. 

First, add the modules we use:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)
#+END_SRC

Now, load it. There's no point in delaying. 
#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC
** sched
My scheduling subsystem. As of [2020-01-08 Wed], described in
=~/core/mind/sys/meta=. 
*** agenda
   :PROPERTIES:
   :created:  2020-01-08 20:17:40 CST
   :END:
Related to the agenda, for instance:
- what displays
- how it displays
- how it is invoked

The main key sequence is
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

I use the habit subsystem:

Other:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'other-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-files '("~/core/mind/sys/short/proc/main.org"))
  (setq org-agenda-span 10)
  (setq org-habit-show-habits-only-for-today nil)
  (defun jmw-org-make-habit ()
    "Turn the following heading into a habit. Schedules it for
  today with .+1d/2d repeater interval."
    (interactive)
    (let ((time (concat
		 "<"
		 (format-time-string "%F") ;; yyyy-mm-dd
		 " .+1d/2d")))
      (org-set-property "STYLE" "habit")
      (org-schedule '(1) time)))
  (global-set-key (kbd "C-c o h") 'jmw-org-make-habit)
#+END_SRC

**** todo keyword
Better colors:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	'(("CANCEL" . (:foreground "red" :weight bold))
	  ("WAIT" . (:foreground "yellow" :weight bold))))
#+END_SRC
*** org-clock
   :PROPERTIES:
   :created:  2020-01-08 20:31:18 CST
   :END:
The =org-clock= feature. 
#+BEGIN_SRC emacs-lisp
  (require 'org-clock) ;; The functions here are autoloaded, but I load it
		       ;; now to add 'org-clock-out-if-current
  (setq org-clock-history-length 35)
  (setq org-clock-mode-line-total 'today)
  (defun jmw-org-clock-out-up ()
    "Clock out and go up a process in the stack."
    (interactive)
    (when (org-clocking-p)
      (let ((org-log-note-clock-out nil)
	    (org-clock-out-switch-to-state nil))
	(org-clock-out)))
    (pop org-clock-history)
    (let* ((marker (pop org-clock-history))
	   (buf (marker-buffer marker)))
      (select-window (jmw-main-sched-window))
      (goto-char marker)
      (org-clock-in)))
  (global-set-key (kbd "C-c o o") 'jmw-org-clock-out-up)
  ;; code copied from ~org-clock-out-if-current~
  (defun jmw-org-clock-out-if-current ()
    (when (and (org-clocking-p)
	       org-clock-out-when-done
	       (marker-buffer org-clock-marker)
	       (or (and (eq t org-clock-out-when-done)
			(member org-state org-done-keywords))
		   (and (listp org-clock-out-when-done)
			(member org-state org-clock-out-when-done)))
	       (equal (or (buffer-base-buffer (org-clocking-buffer))
			  (org-clocking-buffer))
		      (or (buffer-base-buffer (current-buffer))
			  (current-buffer)))
	       (< (point) org-clock-marker)
	       (> (save-excursion (outline-next-heading) (point))
		  org-clock-marker))
      (org-auto-repeat-maybe org-state)
      (jmw-org-clock-out-up)))
  (add-hook 'org-after-todo-state-change-hook
	    'jmw-org-clock-out-if-current)
  (remove-hook 'org-after-todo-state-change-hook
	       'org-clock-out-if-current)
  (add-hook 'org-clock-goto-hook
	    (lambda ()
	      (recenter-top-bottom 18)))

#+END_SRC

A formalization of pushing a task onto the stack. Semantically, pushing
a task is saying: the following is required, or at least relevant, to
completing the current task. This can be viewed as a special, important
case of inserting a TODO item. 

As of [2020-01-10 Fri], there is no symmetric notion for queueing a
task, because queueing a task can be done using ordinary insertion of a
TODO item. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-push-task (task-name)
    "Push a task onto the stack."
    (interactive "sTask name: ")
    (select-window (jmw-main-sched-window))
    (org-clock-goto)
    (org-insert-todo-heading-respect-content)
    (org-do-demote)
    (move-end-of-line 1)
    (insert task-name)
    (org-clock-in))
  (global-set-key (kbd "C-c o p") 'jmw-push-task)
#+END_SRC

=org-clock-goto= from anywhere:
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-clock-goto ()
    (interactive)
    (select-window (jmw-main-sched-window))
    (org-clock-goto))
  (global-set-key (kbd "C-c o g") 'jmw-org-clock-goto)
#+END_SRC

Marking a task done:
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-done ()
    (interactive)
    (jmw-org-clock-goto)
    (org-todo "DONE")
    (org-clock-goto))
  (global-set-key (kbd "C-c o d") 'jmw-org-done)
#+END_SRC
*** other
   :PROPERTIES:
   :created:  2020-01-08 20:33:25 CST
   :END:
#+BEGIN_SRC emacs-lisp
  (defun jmw-main-sched-window ()
    (get-buffer-window "main.org"))

#+END_SRC
** org-babel
   :PROPERTIES:
   :created:  2020-01-08 20:39:50 CST
   :END:
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)))
  (org-babel-lob-ingest "~/.emacs.d/library-of-babel.org")
#+END_SRC

Don't prompt for confirmation when executing code blocks. 
#+BEGIN_SRC emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
** other
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link) 
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (define-key org-mode-map (kbd "C-c C-w") 'jmw-org-refile)
  (setq org-capture-templates
	'(("e"
	   "Computer error"
	   entry
	   (file "~/core/mind/ob/thm/cs/soft/err-log.org")
	   "* %U %?\n %i")
	  ("i"
	   "interesting thought"
	   entry
	   (file+headline "~/core/mind/sys/short/proc/main.org"
			  "interesting thought")
	   "* %U %?\n %i")))
  (setq org-refile-targets '((nil . (:maxlevel . 3))))
  (setq org-entities-user ; special symbols
	'(("scrB" "\\scrB" t "&#x212C;" "B" "B" "‚Ñ¨") ; "script B"
	  ("scrS" "\\scrS" t "&#x1D4AE;" "S" "S" "ùíÆ") 
	  ("scrF" "\\scrF" t "&#x2131;" "F" "F" "‚Ñ±") 
	  ("RR" "\\RR" t "&#x211D;" "R" "R" "‚Ñù") 
	  ("ZZ" "\\ZZ" t "&#x2124;" "Z" "Z" "‚Ñ§") 
	  ("CC" "\\CC" t "&#x2102;" "C" "C" "‚ÑÇ") 
	  ("PP" "\\PP" t "&#x2119;" "P" "P" "‚Ñô") ; prob
	  ("EE" "\\EE" t "&#x1D53C;" "E" "E" "ùîº") ; e.v.
	  ("eps" "\\eps" t "&#x03B5;" "e" "e" "Œµ") 
	  ("iff" "\\iff" t "&#x21D4;" "<->" "<->" "‚áî") 
	  ("imp" "\\imp" t "&#x21D2;" "->" "->" "‚áí") 
	  ("del" "\\del" t "&#x2202;" "d" "d" "‚àÇ") 
	  ("NN" "\\NN" t "&#x2115;" "N" "N" "‚Ñï") 
	  ))
  (setq org-cycle-include-plain-lists 'integrate)
  (setq org-blank-before-new-entry 
	'((heading . nil)
	  (plain-list-item . nil))) 
  (setq org-startup-truncated nil)
  (setq org-M-RET-may-split-line
	'((headline . nil)
	  (item . nil)))
  (setq org-mark-ring-length 16)
  (setq org-use-speed-commands t)
  ;(setq org-popup-calendar-for-date-prompt nil) ;; also turns off live
						;; display
  (defun jmw-org-refile (&optional arg default-buffer rfloc msg)
    "Redefinition of `org-refile` that places the previous location
  of point on the org mark ring if using the refile interface as a
  goto."
    (interactive "P")
    (when (equal arg '(4))
      (org-mark-ring-push))
    (org-refile arg default-buffer rfloc msg))
#+END_SRC

Insert creation time as a property when creating a headline. This is
useful for determining when tasks were created. 
#+BEGIN_SRC emacs-lisp
  (defun jmw-org-insert-creation ()
    (org-set-property "created" (format-time-string "%F %T %Z")))
  (add-hook 'org-insert-heading-hook 'jmw-org-insert-creation)
#+END_SRC

I had this, but I don't really use CDLaTeX
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+END_SRC

Allow more newlines in an emphasis. Following [[https://emacs.stackexchange.com/a/13828/21253][stackexchange]]. 
#+BEGIN_SRC emacs-lisp
  (setf (car (nthcdr 4 org-emphasis-regexp-components)) 10)
  (org-set-emph-re 'org-emphasis-regexp-components
		   org-emphasis-regexp-components)
#+END_SRC

More visible emphasis. According to [[https://www.mail-archive.com/emacs-orgmode@gnu.org/msg115307.html][this]] message, adding different
characters is not going to happen.
#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist
	'(("*" (bold :foreground "Yellow")) ;; like highlighting
	  ("/" italic)
	  ("_" underline)
	  ("=" org-verbatim verbatim)
	  ("~" org-code verbatim)
	  ("+" (:strike-through t))))
#+END_SRC
* pkg
Related to an emacs package. 
** use-package
   :PROPERTIES:
   :created:  2020-01-29 11:36:05 CST
   :END:
Wehn I open emacs for the first time on a new machine, the packages I
use should automatically be downloaded. This is the recommended method.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
** auctex
#+BEGIN_SRC emacs-lisp 
  (use-package tex
    :config
    (setq TeX-view-program-selection
	  (quote
	   (((output-dvi has-no-display-manager)
	     "dvi2tty")
	    ((output-dvi style-pstricks)
	     "dvips and gv")
	    (output-dvi "xdvi")
	    (output-pdf "Okular")
	    (output-html "xdg-open"))))
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq font-latex-fontify-script nil)

    :defer t
#+END_SRC


#+BEGIN_SRC emacs-lisp
    :ensure auctex)
#+END_SRC
** ido
#+BEGIN_SRC emacs-lisp
(ido-mode 'buffers) ;; only buffers because of bug 36435
(setq ido-create-new-buffer 'always)
(setq ido-enable-flex-maatching t)
(defadvice ido-switch-buffer (around no-confirmation activate)
  (let ((confirm-nonexistent-file-or-buffer nil))
    ad-do-it))
#+END_SRC
** elpy
Copied and pasted. 
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC
** buffer-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind
    (("<C-S-up>" . 'buf-move-up)
     ("<C-S-down>" . 'buf-move-down)
     ("<C-S-left>" . 'buf-move-left)
     ("<C-S-right>" . 'buf-move-right)))
#+END_SRC
** bash-completion
#+BEGIN_SRC emacs-lisp
  (use-package bash-completion
    :config
    (bash-completion-setup))
#+END_SRC
** emms
#+BEGIN_SRC emacs-lisp
  (use-package emms-setup
    :config
    (emms-all)
    (emms-default-players)
    ;; settings
    (setq emms-source-file-default-directory "~/core/mind/env/ext")
    (setq emms-repeat-playlist t)
    (emms-mode-line 0)
    (emms-playing-time 0)
    (emms-add-directory-tree (concat
			      emms-source-file-default-directory
			      "/chills"))
    (emms-shuffle)

    :bind
    (("C-c e <SPC>" . 'emms-pause))

    :ensure emms)
#+END_SRC
** ffap
Smart ~C-x C-f~ based on context around point. 
#+BEGIN_SRC emacs-lisp
(ffap-bindings)
#+END_SRC
** cc-mode
Use "line comment style", i.e =//= style comments. 
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
#+END_SRC
** hexl
Emacs's built-in hex editor. 
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-h" 'hexl-find-file)
#+END_SRC
** pyim
A Chinese input method. Installed because ibus pinyin wasn't working
with fullscreen emacs.

#+BEGIN_SRC emacs-lisp
  (use-package pyim
    :config
    (require 'pyim-basedict)
    (pyim-basedict-enable)
    (setq default-input-method "pyim"))
#+END_SRC
** lorem ipsum
   :PROPERTIES:
   :created:  2020-01-29 12:20:45 CST
   :END:
Add lorem ipsum filler text to emacs. 
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum)
#+END_SRC

I don't use the default bindings because it conflicts with org-mode's
~C-c l~.
** vterm
   :PROPERTIES:
   :created:  2020-01-29 19:03:53 CST
   :END:
A terminal emulator within emacs that
- allows curses based applications
- ignores certain shortcuts like ~C-x C-f~. 

#+BEGIN_SRC emacs-lisp
    (use-package vterm
      :config
      (setq vterm-min-window-width 50))
#+END_SRC
* mode
Related to a mode, minor or major. 
** comint-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook ;; don't want line wrapping in REPLs
      (lambda () (setq auto-fill-function '())))
#+END_SRC
** text-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
	  (lambda () (setq fill-column 72)))
#+END_SRC
** custom
   :PROPERTIES:
   :created:  2020-01-29 18:33:43 CST
   :END:
I don't like having Custom litter my =init.el= with stuff. This sets it
to save in a different file, which I don't load. 
#+BEGIN_SRC emacs-lisp 
  (setq custom-file (concat user-emacs-directory "/custom.el"))
#+END_SRC
** other
#+BEGIN_SRC emacs-lisp
(ignore-errors
  (column-number-mode 1)
  (size-indication-mode 1)
  (menu-bar-mode 0) ;; from https://youtu.be/PKaJoqQQoIA?t=423
  (tool-bar-mode 0) ;; from https://youtu.be/PKaJoqQQoIA?t=423
  (scroll-bar-mode 0)
  (winner-mode 1))

#+END_SRC
* startup
Look and feel of emacs upon completion of startup. 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  (add-to-list 'display-buffer-alist
	       `(,(regexp-quote "*shell")
	       display-buffer-same-window))
  (set-default-font "Ubuntu Mono-12")
  (setq inhibit-startup-screen t)
  (add-hook 'window-setup-hook
	    (lambda ()
	      (split-window-right) 
	      (split-window-right)
	      (balance-windows)
	      (find-file (concat (getenv "PROC_DIR")
				 "/main.org"))
	      (set-window-dedicated-p (get-buffer-window "main.org")
				      t) 
	      (windmove-right)
	      (vterm)
	      (windmove-right)
	      (vterm)))
#+END_SRC
** theme
   :PROPERTIES:
   :created:  2020-01-28 22:45:41 CST
   :END:
[2020-01-28 Tue] I haven't given this much thought. =manoj-dark= is
permissible.
#+BEGIN_SRC emacs-lisp
  (load-theme 'manoj-dark)
#+END_SRC
* other
  :LOGBOOK:
  CLOCK: [2020-01-09 Thu 16:30]--[2020-01-09 Thu 16:31] =>  0:01
  :END:
Default case. As of [2019-12-24 Tue], not too organized. 
#+BEGIN_SRC emacs-lisp
;;;;;;;; KEY SEQUENCE ;;;;;;;;
(global-set-key (kbd "C-c j w") 'jmw-wander)
(global-set-key (kbd "C-c j s") 'jmw-safe)
(global-set-key (kbd "C-;") 'other-window)
(global-set-key (kbd "C-c t s") 'jmw-run-with-timer)
(global-set-key (kbd "C-c t c") 'jmw-cancel-timer)
(global-set-key (kbd "C-c t d") 'jmw-time-left) ;; "display"

;;;;;;;; OTHER ;;;;;;;;
;;;; variable ;;;;
(setq make-backup-files nil)
(setq-default fill-column 72)
(setq scroll-preserve-screen-position t)
(setq tab-stop-list '(4 8))
(setq ansi-color-names-vector
      ["black" "red3" "green3" "yellow3"
       "dodger blue" "magenta3" "cyan3" "gray90"])
(setq ansi-color-map (ansi-color-make-color-map))

;;;; other ;;;;
(server-start) 
(defun jmw-7z (zfile file outfile)
  (if (file-exists-p outfile)
      (progn
	(message "Preparing to compress")
        (sit-for 0.25)
	(call-process-shell-command
	 (concat "7z a -p"
		 (read-passwd "Password? " t)
		 " "
		 zfile
		 " "
		 outfile))
	(call-process-shell-command
	 (concat 
	  "shred -u "
	  outfile)))
    (progn
      (message "Preparing to extract")
      (sit-for 0.25)
      (unless (file-exists-p zfile)
        (error (concat
                "Archive file "
                zfile
                " does not exist.")))
      (while (not (eq
		   (call-process-shell-command
		    (concat "7z e -p"
			    (read-passwd "Password? ")
			    " -o"
			    (getenv "TEMP") ;; this could be an issue. Really, we want
			    ;; the dir name
			    " "
			    zfile
			    " "
			    file))
		   0))
	(message "Incorrect Password. Try again.")
	(sit-for 0.5))
      (find-file outfile))))
(defun jmw-wander ()
  (interactive)
  (jmw-7z (getenv "WANDER_ARCHIVE")
	  "wander.txt"
	  (concat (getenv "TEMP")
		  "/wander.txt")))
(defun jmw-safe ()
  (interactive)
  (jmw-7z (getenv "SAFE_ARCHIVE")
	  "safe.txt"
	  (concat (getenv "TEMP")
		  "/safe.txt")))
(defun jmw-times-up ()
  "Single function run when timer expires"
  (play-sound-file "~/core/prod/bin/other/alarm.wav"))
(defun jmw-run-with-timer (durationspec)
  (interactive "sDuration: ")
  (setq jmw-timer
	(run-with-timer (timer-duration durationspec)
			0.5
			'jmw-times-up)))
(defun jmw-find-timer (timerlist)
  (if timerlist
      (if (equal (timer--function (car timerlist))
		 'jmw-times-up)
	  (car timerlist)
	(jmw-find-timer (cdr timerlist)))
    nil))
(defun jmw-cancel-timer ()
  (interactive)
  (cancel-timer jmw-timer)
  (let ((timer (jmw-find-timer timer-list)))
    (if timer
	(setq jmw-timer timer))))
(defun jmw-time-left ()
  "Timer info. May be expanded to more than just time remaining."
  (interactive)
  (let* ((time-diff (time-subtract (timer--time jmw-timer)
				   (current-time)))
	 (floats (float-time time-diff))
	 (seconds (floor floats)))
    (message "%ss" seconds)))

#+END_SRC
