#+PROPERTY: header-args    :results silent :noweb yes :tangle config.el
* use-package
   :PROPERTIES:
   :created:  2020-01-29 11:36:05 CST
   :END:
I use =use-package=. 

When I open emacs on a new machine, my packages should be automatically
downloaded. 
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
* org
Related to =org-mode=. It's amazing how this has taken over my life. 
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

First, add the modules we use. 
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit)
#+END_SRC

Define the prefix key and bind it. 
#+BEGIN_SRC emacs-lisp
(fset 'jmw/org-prefix (make-sparse-keymap))
(global-set-key (kbd "C-c o") 'jmw/org-prefix)
#+END_SRC
** sched
My scheduling subsystem. Described in =~/core/mind/sys/meta=.

The core class is the run. 
#+begin_src emacs-lisp
(cl-defstruct jmw/run
  process-marker)
#+end_src

The run stack. 
#+begin_src emacs-lisp
(setq jmw/run-stack '())
#+end_src
*** agenda
   :PROPERTIES:
   :created:  2020-01-08 20:17:40 CST
   :END:
Related to the agenda, for instance:
- what displays
- how it displays
- how it is invoked

The main key sequence is
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

Specifying which days appear in the agenda:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 10)
  (setq org-agenda-start-day "-4d")
#+END_SRC

Turn a heading into a habit. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-make-habit ()
    "Turn the following heading into a habit. Schedules it for
  today with .+1d/2d repeater interval."
    (interactive)
    (let ((time (concat
		 "<"
		 (format-time-string "%F") ;; yyyy-mm-dd
		 " .+1d/2d")))
      (org-set-property "STYLE" "habit")
      (org-schedule '(1) time)))
  (define-key 'jmw/org-prefix "h" 'jmw/org-make-habit)
#+END_SRC

Set todo keywords.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCEL(c)")))
#+END_SRC

Better colors for TODO keywords. 
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	'(("CANCEL" . (:foreground "red" :weight bold))
	  ("WAIT" . (:foreground "yellow" :weight bold))))
#+END_SRC

Don't change window configuration when viewing the agenda. According to
[[https://stackoverflow.com/q/21195327/4019495][SO]], there is no easy solution. The offender is =delete-other-windows= in
function =org-capture-place-template=. We adopt the solution given in
another [[https://stackoverflow.com/a/54251825/4019495][SO]] post.
#+BEGIN_SRC emacs-lisp
  (defun jmw/ad-org-agenda-place-template (oldfun args)
    (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
      (apply oldfun args)))      
  (advice-add 'org-agenda
	      :around 'jmw/ad-org-capture-place-template)
  (setq org-agenda-window-setup 'other-window)
#+END_SRC

Other:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'other-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-files '("~/core/mind/sys/short/proc/main.org"))
  (setq org-habit-show-habits-only-for-today nil)
#+END_SRC
*** org-clock
   :PROPERTIES:
   :created:  2020-01-08 20:31:18 CST
   :END:
The =org-clock= feature. This corresponds to the "live" part of sched. 

The interface is:
- ~C-c C-x C-i~, =jmw/org-clock-in=. Clock in on process at point and
  push onto the run stack.
- ~C-c C-x C-o~, =org-clock-out=. Clock out, not touching the stack. One
  of two ways to clock out without clocking into another function. The
  other is calling =jmw/org-clock-out-up= on a stack with one run.
- ~C-c C-x C-x~, =org-clock-in-last=. Clock into most recently clocked
  task, not touching the stack.
- ~C-c o o~, =jmw/org-clock-out-up=. Pop a run from the stack, and
  clock into the next. 
- ~C-c o d~, ~C-c o c~. =jmw/org-done=, =jmw/org-cancel=. Marks current
  task complete, then calls =jmw/org-clock-out-up=. 
- ~C-c o p~, =jmw/push-subtask=. Push a subtask onto the stack, and clock
  in.

I want =org-clock-history= to be long. 
#+BEGIN_SRC emacs-lisp
  (setq org-clock-history-length 35)
#+END_SRC

On the mode line, I want to see how much time I've spent today on the
task. The default is showing the amount of time spend since the
beginning of time, which is weird. 
#+BEGIN_SRC emacs-lisp
  (setq org-clock-mode-line-total 'today)
#+END_SRC

=org-clock-goto= should display some context above. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-clock-goto-hook (lambda () (recenter-top-bottom 18)))
#+END_SRC

What follows are many commands related to task manipulation. I use
=org-clock-history= as a task stack.

=org-clock-goto= from anywhere, i.e jump to current clocking task in the
schedule.
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-clock-goto ()
    (interactive)
    (select-frame-set-input-focus (jmw/main-sched-frame))
    (select-window (jmw/main-sched-window))
    (org-clock-goto))
  (define-key 'jmw/org-prefix "g" 'jmw/org-clock-goto)
#+END_SRC

Push a task onto the stack. Semantically, this is saying: the following
is relevant to completing the current task. Usually for tasks I discover
in the moment rather than ones I know at the outset.
#+BEGIN_SRC emacs-lisp
  (defun jmw/push-task (task-name)
    "Push a task onto the stack."
    (interactive "sTask name: ")
    (jmw/org-clock-goto)
    (org-insert-todo-heading-respect-content)
    (org-do-demote)
    (move-end-of-line 1)
    (insert task-name)
    (org-clock-in))
  (define-key 'jmw/org-prefix "p" 'jmw/push-task)
#+END_SRC
As of [2020-01-10 Fri], there is no symmetric notion for queueing a
task. Queueing a task can be done using ordinary insertion of a TODO
item. There is no notion of deferring a task (a la Go's =defer=) because
it can be done using ordinary TODO insertion.

Popping a task off the stack. Not called =jmw/pop-task= because calling
it doesn't mean the task is done.
#+BEGIN_SRC emacs-lisp
(defun jmw/org-clock-out-up ()
  "Clock out and go up a process in the stack."
  (interactive)
  (when (org-clocking-p)
    (let ((org-log-note-clock-out nil)
	        (org-clock-out-switch-to-state nil))
	    (org-clock-out)))
  (pop org-clock-history)
  (let* ((marker (pop org-clock-history))
	       (buf (marker-buffer marker)))
    (select-window (jmw/main-sched-window))
    (goto-char marker)
    (org-clock-in)))
(define-key 'jmw/org-prefix "o" 'jmw/org-clock-out-up)
#+END_SRC

Popping a task off the stack. This time, we're actually done the task.
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-done ()
    (interactive)
    (jmw/org-clock-goto)
    (org-todo "DONE") 
		(jmw/org-clock-out-up))
  (define-key 'jmw/org-prefix "d" 'jmw/org-done)
#+END_SRC

Similarly, pop a task off the stack because we've decided not to do it.
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-cancel ()
    (interactive)
    (jmw/org-clock-goto)
    (org-todo "CANCEL")
		(jmw/org-clock-out-up))
  (define-key 'jmw/org-prefix "c" 'jmw/org-cancel)
#+END_SRC

[2022-01-01 Sat 10:19] Goto daily list. 
#+begin_src emacs-lisp
(defun jmw/org-daily-goto ()
  (interactive)
  (select-frame-set-input-focus (jmw/main-sched-frame))
  (select-window (jmw/main-sched-window))
  (goto-char (org-find-exact-headline-in-buffer "daily")))
(define-key 'jmw/org-prefix "f" 'jmw/org-daily-goto)
#+end_src
*** other
   :PROPERTIES:
   :created:  2020-01-08 20:33:25 CST
   :END:
The window and frame containing =main.org=. 
#+BEGIN_SRC emacs-lisp
;; this uses an internal function, not ideal
(defun jmw/main-sched-frame ()
  jmw/main-frame)
(defun jmw/main-sched-window ()
  (get-buffer-window "main.org" (jmw/main-sched-frame)))
#+END_SRC
** org-babel
   :PROPERTIES:
   :created:  2020-01-08 20:39:50 CST
   :END:
Org's system for dealing with source code. 

Load it for go, because it isn't one of Org's default languages. 
#+BEGIN_SRC emacs-lisp 
(use-package ob-go)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html][Org docs]] say to do this for js. 
#+BEGIN_SRC emacs-lisp
(require 'ob-js)
#+END_SRC

Load the org-babel languages I use. Necessary to get ~C-c C-c~ to
actually execute something.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
	 (python . t)
	 (C . t)
	 (shell . t)
	 (go . t)
	 (js . t)
   (java . t)))
#+END_SRC

This is romantically named the "Library of Babel". As of
[2020-03-20 Fri], I've never used it.
#+BEGIN_SRC emacs-lisp
	(org-babel-lob-ingest "~/.emacs.d/library-of-babel.org")
#+END_SRC

Don't prompt for confirmation when executing code blocks. 
#+BEGIN_SRC emacs-lisp 
(setq org-confirm-babel-evaluate nil)
#+END_SRC

By default, editing org source reorganizes the frame. I want the new
buffer to appear in another window. 
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'other-window)
#+END_SRC

Better templates for creating source blocks.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	     '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist
	     '("py" . "src python"))
(add-to-list 'org-structure-template-alist
	     '("sh" . "src sh"))
#+END_SRC

Don't auto-indent src blocks.
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

New in Emacs 27: enable old structured template insertion. 
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
** heading+list
   :PROPERTIES:
   :created:  2020-03-20 18:12:39 EDT
   :END:
Related to headings and lists. 

Expand lists like they are subheadings. 
#+BEGIN_SRC emacs-lisp
  (setq org-cycle-include-plain-lists 'integrate)
#+END_SRC

Don't insert random blank lines around entries. Don't split lines. 
#+BEGIN_SRC emacs-lisp
  (setq org-blank-before-new-entry 
	'((heading . nil)
	  (plain-list-item . nil))) 
  (setq org-M-RET-may-split-line
	'((headline . nil)
	  (item . nil)))
#+END_SRC

Insert creation time as a property when creating a headline. This is
useful for tasks---I may cancel something if it's been sitting around
for too long.
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-insert-creation ()
    (org-set-property "created" (format-time-string "%F %T %Z")))
  (add-hook 'org-insert-heading-hook 'jmw/org-insert-creation)
#+END_SRC

I don't want to log every time an item is repeated. 
#+BEGIN_SRC emacs-lisp
  (setq org-log-repeat nil)
#+END_SRC

Allow refiling to any headline. 
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((nil . (:maxlevel . 10))))
#+END_SRC

Don't indent when demoting headlines.
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC
** capture
   :PROPERTIES:
   :created:  2020-03-20 18:18:01 EDT
   :END:
=org-capture= is useful for someone with many miscellaneous thoughts. It
allows you to easily record something wherever you are. 

This is the recommended key binding. It has to be global. 
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
#+END_SRC

=org-capture-templates= is the types of =org-capture='s you can perform.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates '())
#+END_SRC

Computer errors. I've had this happen many times: I get an error, I
can't figure it out after 2 or 3 hours, and forget about it. This is a
record of those experiences.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
             '("e"
               "Computer error"
               entry
               (file "~/core/mind/ob/thm/cs/soft/err-log.org")
               "* %U %?\n %i"))
#+END_SRC

These are random thoughts to investigate further. 
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
             '("i"
               "interesting thought"
               entry
               (file+headline "~/core/mind/sys/short/proc/main.org"
                              "interesting thought")
               "* %U %?\n %i"))
#+END_SRC

These are things to google.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
             '("g"
               "google search"
               entry
               (file+headline "~/core/mind/sys/short/proc/main.org"
                              "google search")
               "* %U %?\n %i"))
#+END_SRC

These are things related to =mind/other-mind=.
#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("m"
               "other-mind"
               entry
               (file+headline "~/core/mind/sys/short/proc/main.org"
                              "other mind")
               "* %U %?\n %i"))
#+end_src

Don't change window configuration during an =org-capture=. According to
[[https://stackoverflow.com/q/21195327/4019495][SO]], there is no easy solution. The offender is =delete-other-windows= in
function =org-capture-place-template=. We adopt the solution given in
another [[https://stackoverflow.com/a/54251825/4019495][SO]] post.
#+BEGIN_SRC emacs-lisp
  (defun jmw/ad-org-capture-place-template (oldfun args)
    (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
      (apply oldfun args)))      
  (advice-add 'org-capture-place-template
	      :around 'jmw/ad-org-capture-place-template)
#+END_SRC
** markup
   :PROPERTIES:
   :created:  2020-03-20 18:28:51 EDT
   :END:
Textual markup. 

Allow for *this sentence to actually be formatted bold in org, even
though it spans multiple lines*. Following [[https://emacs.stackexchange.com/a/13828/21253][stackexchange]].
#+BEGIN_SRC emacs-lisp
  (setf (car (nthcdr 4 org-emphasis-regexp-components)) 50)
  (org-set-emph-re 'org-emphasis-regexp-components
		   org-emphasis-regexp-components)
#+END_SRC

Customizing the org emphasis characters (like the asterisk for turning
text bold). According to [[https://www.mail-archive.com/emacs-orgmode@gnu.org/msg115307.html][this]] message, adding different characters is
not going to happen.
#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist
	'(("*" (bold :foreground "Yellow")) ;; like highlighting
	  ("/" italic)
	  ("_" underline)
	  ("=" org-verbatim verbatim)
	  ("~" org-code verbatim)
	  ("+" (:strike-through t))))
#+END_SRC

Adds a comment. Mainly for annotating books (see
=russell-happy.org=). The implementation may change with aesthetic
preferences. The "a" prefix is for "annotation".
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-comment ()
    (interactive)
    (insert "*")
    (org-time-stamp-inactive '(16))
    (insert " JMW:* "))
  (define-key 'jmw/org-prefix "ac" 'jmw/org-comment)
#+END_SRC

Highlight an active region. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/org-highlight-region (from to)
    (interactive "r")
    (when (use-region-p)
      (save-excursion
	(goto-char to)
	(insert "*")
	(goto-char from)
	(insert "*"))
      (deactivate-mark)
      (fill-paragraph)))
  (define-key 'jmw/org-prefix "ah" 'jmw/org-highlight-region)
#+END_SRC

This stores the current location of point for pasting into an org
file. This is critical for org's hypertext capabilities.
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link) 
#+END_SRC
** other
When displayed, I like lines to wrap around rather than disappear off
the edge. It makes tables look terrible, but whatever.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC

Special characters. This'll display them in the buffer and correctly
export to HTML. As of [2020-03-20 Fri], most of these were created to
take notes for 18.675. 
#+BEGIN_SRC emacs-lisp
  (setq org-entities-user ; special symbols
	'(("scrB" "\\scrB" t "&#x212C;" "B" "B" "ℬ") ; "script B"
	  ("scrS" "\\scrS" t "&#x1D4AE;" "S" "S" "𝒮") 
	  ("scrF" "\\scrF" t "&#x2131;" "F" "F" "ℱ") 
	  ("RR" "\\RR" t "&#x211D;" "R" "R" "ℝ") 
	  ("ZZ" "\\ZZ" t "&#x2124;" "Z" "Z" "ℤ") 
	  ("CC" "\\CC" t "&#x2102;" "C" "C" "ℂ") 
	  ("PP" "\\PP" t "&#x2119;" "P" "P" "ℙ") ; prob
	  ("EE" "\\EE" t "&#x1D53C;" "E" "E" "𝔼") ; e.v.
	  ("eps" "\\eps" t "&#x03B5;" "e" "e" "ε") 
	  ("iff" "\\iff" t "&#x21D4;" "<->" "<->" "⇔") 
	  ("imp" "\\imp" t "&#x21D2;" "->" "->" "⇒") 
	  ("del" "\\del" t "&#x2202;" "d" "d" "∂") 
	  ("NN" "\\NN" t "&#x2115;" "N" "N" "ℕ") 
	  ("QQ" "\\QQ" t "&#x211A;" "Q" "Q" "ℚ") 
	  ))
#+END_SRC
* pkg
Related to an emacs package. 
** auctex
For editing source files in the TeX family. 
#+BEGIN_SRC emacs-lisp 
(use-package tex
  :config
  <<auctex-config>>

  :defer t
  :ensure auctex)
#+END_SRC
*** cfg
:PROPERTIES:
:created:  2020-03-27 18:30:46 EDT
:header-args+: :noweb-ref auctex-config :tangle no
:END:
What program to view TeX output. Change pdf to use =xdg-open=. Using
=setf= feels like cheating. 
#+BEGIN_SRC emacs-lisp
(setf (alist-get 'output-pdf TeX-view-program-selection) '("xdg-open"))
#+END_SRC

These are recommended in section 5.3 of the AUCTeX manual, "Automatic
Parsing of TeX Files". They have something to do with the =auto=
directory and parsing speed. 
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
#+END_SRC

Query for the master file every time. 
#+BEGIN_SRC emacs-lisp
(setq-default TeX-master nil)
#+END_SRC

Don't raise/lower sub/superscripts. It looks weird. 
#+BEGIN_SRC emacs-lisp
(setq font-latex-fontify-script nil)
#+END_SRC

Add completion for =\autoref=. [2022-03-01 Tue 00:06] There's probably
an easier way to do this. [2022-05-13 Fri 23:04] edited. Yes, there
was. See
https://emacs.stackexchange.com/questions/22205/declaring-custom-completions-to-auctex.
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (TeX-add-symbols '("autoref" TeX-arg-ref))))
#+end_src
** elpy
For editing Python source files. 

Copied and pasted. 
#+BEGIN_SRC emacs-lisp 
(use-package elpy
	:defer t
	:init
	(advice-add 'python-mode :before 'elpy-enable)

	:bind (:map elpy-mode-map
							<<elpy-mode-map>>)

	:config
	;; Needed to get xref-find-definitions working
	;; See https://github.com/jorgenschaefer/elpy/issues/948
	(setq elpy-rpc-backend "jedi")
	)
#+END_SRC

To behave like ~C-M-f~, ~C-M-d~, etc.
#+BEGIN_SRC emacs-lisp :noweb-ref elpy-mode-map :tangle no
("C-c C-f" . elpy-nav-forward-block)
("C-c C-b" . elpy-nav-backward-block)
#+END_SRC
** buffer-move
Switches buffers between windows. This is super useful. 
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind
    (("<C-S-up>" . 'buf-move-up)
     ("<C-S-down>" . 'buf-move-down)
     ("<C-S-left>" . 'buf-move-left)
     ("<C-S-right>" . 'buf-move-right)))
#+END_SRC
** emms
EMMS is the Emacs MultiMedia System. I use it for playing music. 
#+BEGIN_SRC emacs-lisp
  (use-package emms-setup
    :config
    (emms-all)
    (emms-default-players)
    (setq emms-source-file-default-directory "~/core/mind/env/ext")
    (setq emms-repeat-playlist t)
    (emms-mode-line 0)
    (emms-playing-time 0)
    (emms-add-directory-tree (concat
			      emms-source-file-default-directory
			      "/chills"))
    (emms-shuffle)

    :ensure emms)
#+END_SRC

Define my emms prefix. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw/emms-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c e") 'jmw/emms-prefix)
#+END_SRC

Pause the music. 
#+BEGIN_SRC emacs-lisp
  (define-key 'jmw/emms-prefix (kbd "<SPC>") 'emms-pause)
#+END_SRC
** cc-mode
For editing C source files. 

Use "line comment style", i.e =//= style comments. 
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
#+END_SRC
** hexl
Emacs's built-in hex editor. 
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-h" 'hexl-find-file)
#+END_SRC
** pyim
A Chinese input method. Installed because ibus pinyin wasn't working
with fullscreen emacs.

[2020-10-06 Tue 11:45] Don't use it. 
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package pyim
    :config
    (require 'pyim-basedict)
    (pyim-basedict-enable)
    (setq default-input-method "pyim"))
#+END_SRC
** lorem ipsum
   :PROPERTIES:
   :created:  2020-01-29 12:20:45 CST
   :END:
Add lorem ipsum filler text to emacs. The utility of this is avoiding
writing that random one-off script (or find a suitable document) when
you need to generate text.
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum)
#+END_SRC

I don't use the default bindings because it conflicts with org-mode's
~C-c l~.
** vterm
   :PROPERTIES:
   :created:  2020-01-29 19:03:53 CST
   :END:
A terminal emulator that
- allows curses based applications
- ignores certain shortcuts like ~C-x C-f~ (passes them to emacs)
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :config
    (setq vterm-min-window-width 50))
#+END_SRC

Define my vterm prefix
#+BEGIN_SRC emacs-lisp
  (fset 'jmw/vterm-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c v") 'jmw/vterm-prefix)
#+END_SRC

Bind functions
#+BEGIN_SRC emacs-lisp
  (define-key 'jmw/vterm-prefix "b" 'vterm)
  (define-key 'jmw/vterm-prefix "o" 'vterm-other-window)
#+END_SRC

Recommended on [[https://github.com/akermu/emacs-libvterm][github]]. Easier way to do directory tracking. 
#+begin_src emacs-lisp
(add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq default-directory path))))
#+end_src

Don't prompt for killing vterm buffers. Code from [[https://stackoverflow.com/a/2708042/4019495][SO]]. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'vterm-mode-hook
	    (lambda ()
	      (set-process-query-on-exit-flag
	       (get-buffer-process (current-buffer)) nil)))	  
#+END_SRC
** go-mode
   :PROPERTIES:
   :created:  2020-02-05 08:31:27 EST
   :END:
Major mode for Go source files. 
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
	  :bind
	  (:map go-mode-map
	  ("M-." . godef-jump)
	  ("C-x 4 ." . godef-jump-other-window)
	  ("C-c C-d" . godoc-at-point))

	  :config
	  ;; (setq godoc-at-point-function 'godoc-gogetdoc)
	  )
#+END_SRC

** ivy
   :PROPERTIES:
   :created:  2020-02-16 16:41:13 EST
   :END:
A better way to select an item from a list. This includes
- ~C-x C-f~
- ~M-x~
#+BEGIN_SRC emacs-lisp
  (use-package ivy)
  (ivy-mode 1)
#+END_SRC

These are the recommended customizations.
#+BEGIN_SRC emacs-lisp
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
#+END_SRC 

Ignore order of input tokens. This is the default of helm. 
#+BEGIN_SRC emacs-lisp
    (setq ivy-re-builders-alist
	  '((t . ivy--regex-ignore-order)))
#+END_SRC
*** counsel
   :PROPERTIES:
   :created:  2020-02-16 21:51:03 EST
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (:map global-map
		("M-x" . counsel-M-x)
		("C-x C-f" . counsel-find-file)
		("M-y" . counsel-yank-pop)
		("C-h v" . counsel-describe-variable)
		("C-h f" . counsel-describe-function)
	   :map org-mode-map
	   ("C-c C-j" . counsel-org-goto))

    :config
    (setq ivy-initial-inputs-alist '(()))
    (setq counsel-find-file-at-point t))
#+END_SRC

Push onto the org mark ring when using counsel to goto. We want the mark
ring to be large.
#+BEGIN_SRC emacs-lisp
  (defun jmw/ad-counsel-org-goto ()
    (org-mark-ring-push))
  (advice-add 'counsel-org-goto
	      :before 'jmw/ad-counsel-org-goto)
  (setq org-mark-ring-length 16)
#+END_SRC
*** ivy-rich
   :PROPERTIES:
   :created:  2020-02-18 15:31:59 EST
   :END:
Display more info in ivy. For example, make ~M-x~ display a column of
documentation alongside the list of candidate functions. 
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :config
    ;; (ivy-rich-mode 1)
    )
#+END_SRC

The reason I looked into this was for =counsel-find-file=. I wanted to
see =ls -l= like stuff. 

The first step is to define a function for the file size. 
#+BEGIN_SRC emacs-lisp
  (defun ivy-rich-file-size (candidate)
    (let ((fname (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p fname)) (file-remote-p fname))
	  ""
	(file-size-human-readable (file-attribute-size
				   (file-attributes fname))
				  "si"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (plist-put ivy-rich-display-transformers-list
	     'counsel-find-file
	     '(:columns
	      ((ivy-rich-candidate
		(:width 40))
	       ;; (ivy-rich-file-user
	       ;;  (:width 4 :face font-lock-doc-face))
	       ;; (ivy-rich-file-group
	       ;;  (:width 4 :face font-lock-doc-face))
	       ;; (ivy-rich-file-modes
		;; (:width 11 :face font-lock-doc-face))
	       (ivy-rich-file-size
		(:width 6 :face font-lock-doc-face))
	       (ivy-rich-counsel-find-file-truename
		(:face font-lock-doc-face))
	       ;; (ivy-rich-file-last-modified-time
	       ;;  (:width 30 :face font-lock-doc-face))
	       )))
  (ivy-rich-set-display-transformer)
#+END_SRC

When =t=, this prompted me for my scp password whenever I had a ssh
connection to =aloysius=. 
#+BEGIN_SRC emacs-lisp
(setq ivy-rich-parse-remote-buffer nil)
#+END_SRC
** exwm
   :PROPERTIES:
   :created:  2020-03-01 19:11:44 EST
   :END:
The Emacs OS. For contessa, added desktop entry for emacs. 

Whether to use EXWM and load its config. Currently very simple: use
=wmctrl(1)= to test if a WM is already running.
#+begin_src emacs-lisp 
(setq jmw/use-exwmp
      (not (eq (call-process-shell-command "wmctrl -m")
               0)))
#+end_src

The following doesn't work. When using EXWM, then these lines are run
the DE hasn't been set up yet, causing =wmctrl= to give an error. 
#+begin_src emacs-lisp :tangle no
(setq jmw/current-wm
      (shell-command-to-string
       "wmctrl -m | grep 'Name' | cut -d':' -f2 | xargs echo -n"))
(setq jmw/use-exwmp
      (string= jmw/current-wm "EXWM"))
#+end_src

Load.
#+BEGIN_SRC emacs-lisp 
(when jmw/use-exwmp
  (use-package exwm
    :ensure nil 
    :demand t

    :config
    <<exwm-config>>))
#+END_SRC
*** cfg
:PROPERTIES:
:created:  2020-03-24 15:33:23 EDT
:header-args+: :noweb-ref exwm-config :tangle no
:END:
This heading is tangled into =exwm='s =use-package= form with Org's
noweb.

Setup the X system tray. 
#+BEGIN_SRC emacs-lisp
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 16)
#+END_SRC

We want 8 workspaces by default. 
#+BEGIN_SRC emacs-lisp
  (setq exwm-workspace-number 8)
#+END_SRC

These are the "most global" key bindings. They work in line mode and
char mode.
#+BEGIN_SRC emacs-lisp
(setq exwm-input-global-keys
      `(
        ([?\s-r] . exwm-reset)
        ([?\s-w] . exwm-workspace-switch)
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))
        ([?\s-&] . (lambda (command)
                     (interactive (list (read-shell-command "$ ")))
                     (start-process-shell-command command nil command)))
        (,(kbd "C-;") . other-window)
        (,(kbd "C-'") . other-frame)
        (,(kbd "s-k") . exwm-workspace-delete)
        (,(kbd "s-l") . jmw/lock-screen)
        ))
#+END_SRC

Key translations in line mode. For instance, ~C-c~ is normally captured
by emacs and never sent to the application. To copy text, then, we make
~M-w~ translate to ~C-c~. 
#+BEGIN_SRC emacs-lisp
  (setq exwm-input-simulation-keys
	'(
	  ([?\M-w] . [?\C-c])
	  ([?\C-y] . [?\C-v])
	  ))
#+END_SRC

Allow us to see and switch to buffers in other workspaces. 
#+BEGIN_SRC emacs-lisp
  (setq exwm-workspace-show-all-buffers t)
  (setq exwm-layout-show-all-buffers t)
#+END_SRC

This hook is run when =WM_CLASS= (part of X) changes. We use this to
name EXWM buffers. By default, they're all called =*EXWM*=. This makes
the buffer with firefox called =firefox=, the buffer with anki called
=Anki=, etc.
#+BEGIN_SRC emacs-lisp
  (add-hook 'exwm-update-class-hook
	    (lambda ()
	      (exwm-workspace-rename-buffer exwm-class-name)))
#+END_SRC

=exwm-input-prefix-keys= are prefix keys sent to Emacs in line mode. For
instance, ~C-x~ is sent to Emacs (and thus never the application) so
that ~C-x b~ works from anywhere. 

I don't usually need help on Emacs (~C-c h~) from an EXWM buffer. ~C-h~
also conflicts with some other stuff, ex.
- Anki add card history
- Firefox history
#+BEGIN_SRC emacs-lisp
  (setq exwm-input-prefix-keys (delete ?\C-h exwm-input-prefix-keys))
#+END_SRC

Be able to quit from anywhere. Not sure why ~C-g~ isn't in
=exwm-input-prefix-keys= by default. 
#+BEGIN_SRC emacs-lisp
  (setq exwm-input-prefix-keys (add-to-list 'exwm-input-prefix-keys ?\C-g))
#+END_SRC

The [[https://github.com/ch11ng/exwm/wiki/Configuration-Example][example config]] given in the wiki says you need to add this, but it
can be anywhere in your config.
#+BEGIN_SRC emacs-lisp
  (exwm-enable)
#+END_SRC

[2021-06-28 Mon 20:56] My pinyin IME, [[https://wiki.archlinux.org/title/IBus][IBus]]. This is Arch's recommended
command for starting the daemon. Options (~man ibus-daemon~):
- d: daemonize
- r: replace
- x: execute ibus XIM server (??)
- R: not in manual
#+begin_src emacs-lisp
(call-process-shell-command "ibus-daemon -drxR")
#+end_src
**** desktop-environment
     :PROPERTIES:
     :created:  2020-03-10 00:22:02 EDT
     :END:
We want to use this only if we're using EXWM. 
#+BEGIN_SRC emacs-lisp
  (use-package desktop-environment
    :ensure nil

    :config
    ;; For some reason, this has to be after exwm setup
    (setq desktop-environment-update-exwm-global-keys :global)
    (desktop-environment-mode))
#+END_SRC

Redefine to take a screenshot of a region and copy to clipboard. By
default, =desktop-environment-screenshot= saves the entire screen to
some specified directory. This took me way too long to hack. Some
oddities:
- The ~sleep 0.1~ at the beginning is suggested by [[https://bbs.archlinux.org/viewtopic.php?id=86507][this old archlinux
  bbs]] thread. If it's not there, on EXWM windows it gives the error
  "Couldn't grab keyboard".
- The plethora of flags is to get =scrot(1)= to copy to clipboard. 
- The ~&>/dev/null~ needs to be there, else =scrot(1)= hangs. Why? Who
  knows.
This is the state as of [2020-03-21 Sat]. Let's hope this will one day
be written better. 
#+BEGIN_SRC emacs-lisp
  (defun desktop-environment-screenshot ()
    (interactive)
    (shell-command "sleep 0.2; scrot -s '/tmp/%F_%T_$wx$h.png' -e 'xclip -selection clipboard -target image/png -i $f &>/dev/null'"))
#+END_SRC
**** display-time-mode
     :PROPERTIES:
     :created:  2020-03-17 16:01:31 EDT
     :END:
  Display the current time on the modeline. Used in conjunction with
  mini-modeline for my system tray. 

  Formatting. 
  #+BEGIN_SRC emacs-lisp
    (setq display-time-day-and-date t)
    (setq display-time-24hr-format t)
  #+END_SRC

  Do not display the load average. No idea why this is displayed alongside
  time by default. 
  #+BEGIN_SRC emacs-lisp
    (setq display-time-default-load-average nil)
  #+END_SRC

  Use it.
  #+BEGIN_SRC emacs-lisp
    (display-time-mode 1)
  #+END_SRC
**** display-battery-mode
     :PROPERTIES:
     :created:  2020-03-17 16:18:23 EDT
     :END:
  Display battery status on the modeline. Used in conjuction with
  mini-modeline for my system tray.
  #+BEGIN_SRC emacs-lisp
    (display-battery-mode 1)
  #+END_SRC
** smart-mode-line
   :PROPERTIES:
   :created:  2020-03-16 17:17:54 EDT
   :END:
A more customizable mode line. 

Mark all themes as safe. 
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC

Main loading. 
#+BEGIN_SRC emacs-lisp 
(use-package smart-mode-line
  :config
  <<smart-mode-line-config>>
  )
#+END_SRC
*** cfg
:PROPERTIES:
:created:  2020-06-02 22:05:42 EDT
:header-args: :tangle no :noweb-ref smart-mode-line-config :results silent
:END:
Sml is supposed to automatically detect theme. It doesn't. 
#+BEGIN_SRC emacs-lisp
(setq sml/theme 'dark)
#+END_SRC

Makes modes more compact. Before, Narrow mode would be all the way at
the right. 
#+BEGIN_SRC emacs-lisp
(setq sml/mode-width 0)
#+END_SRC

Main invocation.
#+BEGIN_SRC emacs-lisp
(sml/setup)
#+END_SRC
** mini-modeline
   :PROPERTIES:
   :created:  2020-03-17 14:38:32 EDT
   :END:
Move modeline to reside in minibuffer area. Now, only the current
window's mode line is displayed. 

The issue with the default is a lot of info is repeated---the current
time, the current clocking task, etc. Furthermore, with the way I
horizontally split windows, the info wouldn't even fit. 

This is much cleaner. 
#+BEGIN_SRC emacs-lisp
(use-package mini-modeline
  :after smart-mode-line

  :config
  <<mini-modeline-config>>
  )
#+END_SRC
*** cfg
:PROPERTIES:
:created:  2020-06-02 20:55:37 EDT
:header-args: :tangle no :noweb-ref mini-modeline-config :results silent
:END:
Make space for systemtray. 
#+BEGIN_SRC emacs-lisp
(setq mini-modeline-right-padding 20)
#+END_SRC

For some reason, [2020-06-02 Tue] mini-modeline does not agree with
line-number-mode. See [[https://github.com/kiennq/emacs-mini-modeline/issues/34][github issue]]. I'm turning it off and inserting
manually.
#+BEGIN_SRC emacs-lisp
(line-number-mode 0)
(defun jmw/mode-line-buffer-pos ()
  (concat 
   (number-to-string (line-number-at-pos))
   ":"
   (number-to-string (current-column))
   ))
#+END_SRC

Main format.
#+BEGIN_SRC emacs-lisp
(setq mini-modeline-r-format
      '("" ;; mode line construct needs to start with a string
        "%e"
        mode-line-front-space
				(:eval (jmw/mode-line-buffer-pos))
				mode-line-position
        ;; (:eval (string-trim (format-mode-line mode-line-position)))
        mode-line-mule-info
        mode-line-client
        mode-line-modified
        mode-line-remote
				;; empty if running in window system
        mode-line-frame-identification
        mode-line-buffer-identification
				"   "
				;; I guess this is for evil mode
        ;; evil-mode-line-tag
        (:eval (string-trim (format-mode-line mode-line-modes)))
				"   "
        mode-line-misc-info
        ))
#+END_SRC

Invoke. 
#+BEGIN_SRC emacs-lisp
(mini-modeline-mode t)
#+END_SRC
** js2-mode
   :PROPERTIES:
   :created:  2020-03-23 13:53:15 EDT
   :END:
An improved javascript major mode. 
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (setq js-indent-level 2))
#+END_SRC
** smart-tabs-mode
:PROPERTIES:
:created:  2020-10-05 23:59:15 EDT
:END:
Tabs for indentation, spaces for alignment. 

The [[https://docs.microsoft.com/en-us/archive/blogs/cyrusn/tabs-vs-spaces?utm_source=thenewstack&utm_medium=website&utm_campaign=platform][least wrong]] of the three opinions on tabs vs spaces. 

#+begin_src emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c++ 'c))
#+end_src
** c++-mode
:PROPERTIES:
:created:  2020-10-06 11:41:15 EDT
:END:
#+BEGIN_SRC emacs-lisp
(defun inside-class-enum-p (pos)
  "Checks if POS is within the braces of a C++ \"enum class\"."
  (ignore-errors
    (save-excursion
      (goto-char pos)
      (up-list -1)
      (backward-sexp 1)
      (looking-back "enum[ \t]+class[ \t]+[^}]+"))))

(defun align-enum-class (langelem)
  (if (inside-class-enum-p (c-langelem-pos langelem))
      0
    (c-lineup-topmost-intro-cont langelem)))

(defun align-enum-class-closing-brace (langelem)
  (if (inside-class-enum-p (c-langelem-pos langelem))
      '-
    '+))

(defun fix-enum-class ()
  "Setup `c++-mode' to better handle \"class enum\"."
  (add-to-list 'c-offsets-alist '(topmost-intro-cont . align-enum-class))
  (add-to-list 'c-offsets-alist
               '(statement-cont . align-enum-class-closing-brace)))

(add-hook 'c++-mode-hook 'fix-enum-class)

#+END_SRC
** typescript-mode
:PROPERTIES:
:created:  2021-05-13 12:53:45 EDT
:END:
Indent with two spaces. Changing =tab-stop-list= doesn't work, not sure
why.
#+begin_src emacs-lisp
(setq typescript-indent-level 2)
#+end_src

Raise and lower volume.
#+begin_src emacs-lisp
(define-key 'jmw/emms-prefix (kbd "+") 'emms-volume-raise)
(define-key 'jmw/emms-prefix (kbd "-") 'emms-volume-lower)
#+end_src
* mode
Related to a mode, minor or major. 
** custom
   :PROPERTIES:
   :created:  2020-01-29 18:33:43 CST
   :END:
Custom is Emacs's user-friendly customization interface. I don't like
it, I prefer simple =setq='s. 

I don't like having Custom litter my =init.el= with stuff. This sets it
to save in a different file, which I don't load. Normally, Custom will
do nothing anyway, but occasionally I'll do something that causes it to
randomly pop back into my =init.el=. 
#+BEGIN_SRC emacs-lisp 
  (setq custom-file (concat user-emacs-directory "/custom.el"))
#+END_SRC
** size-indication-mode
   :PROPERTIES:
   :created:  2020-03-21 14:21:26 EDT
   :END:
Display size of buffer on the mode line. 
#+BEGIN_SRC emacs-lisp
  (size-indication-mode 1)
#+END_SRC
** emacs-lisp-mode
:PROPERTIES:
:created:  2020-05-22 17:23:47 EDT
:END:
Don't use tabs for lisp indentation. 
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda () (setq indent-tabs-mode nil)))
#+END_SRC
** electric-indent-mode
:PROPERTIES:
:created:  2020-05-22 17:32:30 EDT
:END:
By default, electric-indent-mode indents the previous /and/ the next
line. I almost never want the former. Using solution from [[https://emacs.stackexchange.com/a/20899/21253][SE]]. 
#+BEGIN_SRC emacs-lisp
(setq-default electric-indent-inhibit t)
#+END_SRC
** indent-tabs-mode
:PROPERTIES:
:created:  2021-04-29 17:55:45 EDT
:END:
By default, don't indent using tabs. 
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** other
#+BEGIN_SRC emacs-lisp
(ignore-errors
  (menu-bar-mode 0) 
  (tool-bar-mode 0) 
  (scroll-bar-mode 0)
  (winner-mode 1)
  (fringe-mode 1))
#+END_SRC
* startup
Look and feel of emacs upon after startup. 

[2020-10-07 Wed 22:16] Changed from =set-default-font= to
=set-frame-font=, see [[https://blog.leiwang.info/posts/emacs-set-default-font/][here]]. 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  (set-frame-font "Ubuntu Mono-12" t t)
  (setq inhibit-startup-screen t)
#+END_SRC

Setup standard applications in EXWM. [2020-03-17 Tue] I guess I'll call
manually. For some reason, putting it in =window-setup-hook= doesn't
work.
#+BEGIN_SRC emacs-lisp
	(defun jmw/exwm-standard-apps ()
		(interactive)

		(exwm-workspace-switch-create 1)
		(let ((browser (getenv "BROWSER")))
			(start-process-shell-command browser nil browser))

		(sleep-for 1)

		(exwm-workspace-switch-create 2)
		(let ((pdf-viewer (getenv "PDF_VIEWER")))
			(start-process-shell-command pdf-viewer nil pdf-viewer))

		(sleep-for 1)

		(exwm-workspace-switch-create 3)
		(start-process-shell-command "anki" nil "anki")

		(sleep-for 1)
		)
#+END_SRC

Applications to run at login. 
#+BEGIN_SRC emacs-lisp
	(defun jmw/exwm-startup-apps ()
		;; if megasync doesn't detect a system tray, it'll pop up a window.
		;; sleep so it will detect a system tray
		(start-process-shell-command "megasync" nil "sleep 5; megasync")
		)
#+END_SRC

These are the initial files I want open. 
#+BEGIN_SRC emacs-lisp
(setq jmw/init-file-list (list
	                        (getenv "JMW_EMACS_CONFIG")
                          (getenv "JMW_LATEX_CONFIG")
                          (getenv "JMW_SH_CONFIG")
                          "/home/michael/core/mind/ob/hum/ex/misc.org"
	                        ))
#+END_SRC

The main thing. 
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
			    (lambda ()
				    (split-window-right) 
				    (split-window-right)
				    (balance-windows)
				    (dolist (fname jmw/init-file-list)
		          (find-file fname))
				    (find-file (concat (getenv "PROC_DIR")
				                       "/main.org"))
            (setq jmw/main-window (get-buffer-window "main.org"))
            (setq jmw/main-frame (selected-frame))
				    (set-window-dedicated-p jmw/main-window
							                      t) 
				    (windmove-right)
				    (vterm)
				    (windmove-right)
				    (vterm)
				    (when (member 'exwm features)
					    ;; We're using exwm
					    (jmw/exwm-startup-apps))
				    (select-window jmw/main-window))
          )
#+END_SRC
** theme
   :PROPERTIES:
   :created:  2020-01-28 22:45:41 CST
   :END:
[2020-01-28 Tue] I haven't given this much thought. =manoj-dark= is
fine. 

[2020-03-17 Tue] trying other stuff. Decided to stick with this. 
#+BEGIN_SRC emacs-lisp 
  (load-theme 'manoj-dark)
#+END_SRC

The default face for the current clocking task isn't very readable. 
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-mode-line-clock
		    nil
		    :foreground "cyan3")
#+END_SRC
* other
  :LOGBOOK:
  CLOCK: [2020-01-09 Thu 16:30]--[2020-01-09 Thu 16:31] =>  0:01
  :END:
Default case. As of [2019-12-24 Tue], not too organized. 

Define =jmw/prefix=. This is the prefix key for my personal stuff. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw/prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c j") 'jmw/prefix)
#+END_SRC

By default, Emacs will create backups of files, which look like
#+BEGIN_EXAMPLE
[michael@contessa test-backup]$ ls
test.org  test.org~
#+END_EXAMPLE
which I don't like. If I need backups, I'll use version control. 
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

Leave point at the same screen position when paging down. Don't know why
the default is to move point to the top of the window.
#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position t)
#+END_SRC

Start the emacs server. This allows the command =emacsclient(1)= to open
a file in a buffer owned by an existing emacs process, which is used in
=git-commit(1)=.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Break at 72 chars. 
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 72)
#+END_SRC

Window width for textual buffers. Resize to it. 
#+BEGIN_SRC emacs-lisp
(setq jmw/text-window-width (+ fill-column 3))
(defun jmw/resize-text-window ()
	(interactive)
	(window-resize (selected-window)
								 (- jmw/text-window-width (window-width))
								 t))
	
#+END_SRC

Useful for opening a LaTeX editing window next to Okular. 
#+BEGIN_SRC emacs-lisp
(defun jmw/split-text-window-right ()
  (interactive)
  (split-window-right)
	(sit-for 0.001)
  (windmove-right)
  (jmw/resize-text-window)
  ;; (switch-to-buffer (get-buffer-create "*scratch*"))
  )
(define-key 'jmw/prefix "3" 'jmw/split-text-window-right)
#+END_SRC

Set the display tab stop. Tabs are displayed as a space that extends to
the next tab stop column.

This is unrelated to how ~<TAB>~ works as a command.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

These aren't bound to anything by default. Put them to good use. 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-;") 'other-window)
  (define-key org-mode-map (kbd "C-'") nil)
  (global-set-key (kbd "C-'") 'other-frame)
#+END_SRC

Type ~y~ or ~n~ instead of yes/no. One would think there was a better
way. 
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

If exists a window containing buffer, switch to it. Otherwise, switch to
buffer.
#+BEGIN_SRC emacs-lisp
  (defun switch-to-window-or-buffer (buffer)
    (let ((containing-window (get-buffer-window buffer t)))
      (if containing-window
	  (select-window containing-window)
	(switch-to-buffer buffer))))
#+END_SRC

Insert the current time. 
#+BEGIN_SRC emacs-lisp
(defun jmw/insert-instant ()
  (interactive)
  (org-time-stamp-inactive '(16)))
(define-key 'jmw/prefix "t" 'jmw/insert-instant)
#+END_SRC

Do not have ctl-z suspend.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

Yank current buffer.
#+begin_src emacs-lisp
(defun jmw/kill-buffer-filename ()
  (interactive)
  (kill-new (buffer-file-name)))
(define-key 'jmw/prefix "b" 'jmw/kill-buffer-filename)
#+end_src

Lock the screen. =slock= seems to be the simplest solution. 
#+begin_src emacs-lisp
(defun jmw/lock-screen ()
    (call-process-shell-command "slock"))
#+end_src

Swap caps lock and left control.
#+begin_src emacs-lisp
(defun jmw/swap-caps ()
  (interactive)
  (call-process-shell-command "/usr/bin/setxkbmap -option 'ctrl:swapcaps'"))
(define-key 'jmw/prefix "k" 'jmw/swap-caps)
#+end_src

#+begin_src emacs-lisp
(define-key 'jmw/prefix "r" 'rename-buffer)
#+end_src
** 7z
I use 7z as my default encryption format. This opens 7z files in the
style I want: the file will be extracted to my temporary directory when
first called, and rearchived when called again.
#+BEGIN_SRC emacs-lisp
  (defun jmw/7z (zfile file outfile)
    (if (file-exists-p outfile)
	;; If outfile exists, put it back into the zfile (the 7z archive)
	(progn
	  (message "Preparing to compress")
	  (sit-for 0.25)
	  (call-process-shell-command
	   (concat "7z a -p"
		   (read-passwd "Password? " t)
		   " "
		   zfile
		   " "
		   outfile))
	  (call-process-shell-command
	   (concat 
	    "shred -u "
	    outfile)))
      ;; Otherwise, extract it
      (progn
	(message "Preparing to extract")
	(sit-for 0.25)
	(unless (file-exists-p zfile)
	  (error (concat
		  "Archive file "
		  zfile
		  " does not exist.")))
	(while (not (eq
		     (call-process-shell-command
		      (concat "7z e -p"
			      (read-passwd "Password? ")
			      " -o"
			      (getenv "JMW_TEMP") 
			      " "
			      zfile
			      " "
			      file))
		     0))
	  (message "Incorrect Password. Try again.")
	  (sit-for 0.5))
	(find-file outfile))))

#+END_SRC

The wander archive is a kind of diary. I write in it about once a
month. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/wander ()
    (interactive)
    (jmw/7z (getenv "WANDER_ARCHIVE")
	    "wander.txt"
	    (concat (getenv "JMW_TEMP")
		    "/wander.txt")))
  (define-key 'jmw/prefix "w" 'jmw/wander)
#+END_SRC

The safe archive contains passwords. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/safe ()
    (interactive)
    (jmw/7z (getenv "SAFE_ARCHIVE")
	    "safe.org"
	    (concat (getenv "JMW_TEMP")
		    "/safe.org")))
  (define-key 'jmw/prefix "s" 'jmw/safe)
#+END_SRC
** timer
   :PROPERTIES:
   :created:  2020-02-01 20:12:03 CST
   :END:
I use timers in my workflow. They're usually end conditions of runs.

Define the timer prefix, and bind it. 
#+BEGIN_SRC emacs-lisp
  (fset 'jmw/timer-prefix (make-sparse-keymap))
  (global-set-key (kbd "C-c t") 'jmw/timer-prefix)
#+END_SRC

This is how you create a timer. In the future, this should be extended
to take in info about the current run. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/run-with-timer (durationspec)
    (interactive "sDuration: ")
    (setq jmw/timer
	  (run-with-timer (timer-duration durationspec)
			  0.5
			  'jmw/times-up)))
  (define-key 'jmw/timer-prefix "s" 'jmw/run-with-timer)
#+END_SRC

This is what happens when time is up. 
#+BEGIN_SRC emacs-lisp
  (defun jmw/times-up ()
    "Single function run when timer expires"
    (play-sound-file "~/core/prod/bin/other/alarm.wav"))
#+END_SRC

The rest of these functions need serious work.
#+BEGIN_SRC emacs-lisp
  (defun jmw/find-timer (timerlist)
    (if timerlist
	(if (equal (timer--function (car timerlist))
		   'jmw/times-up)
	    (car timerlist)
	  (jmw/find-timer (cdr timerlist)))
      nil))
  (defun jmw/cancel-timer ()
    (interactive)
    (cancel-timer jmw/timer)
    (let ((timer (jmw/find-timer timer-list)))
      (if timer
	  (setq jmw/timer timer))))
  (defun jmw/time-left ()
    "Timer info. May be expanded to more than just time remaining."
    (interactive)
    (let* ((time-diff (time-subtract (timer--time jmw/timer)
				     (current-time)))
	   (floats (float-time time-diff))
	   (seconds (floor floats)))
      (message "%ss" seconds)))
  (define-key 'jmw/timer-prefix "c" 'jmw/cancel-timer)
  (define-key 'jmw/timer-prefix "d" 'jmw/time-left) ;; "display"
#+END_SRC
** tests
:PROPERTIES:
:created:  2020-10-08 12:36:53 EDT
:END:
#+begin_src emacs-lisp
(setq fst-test-001 567)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq fst-test-002 567)
#+end_src
